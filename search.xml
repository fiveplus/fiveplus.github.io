<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS升级并设置默认启动</title>
    <url>/CentOS%E5%8D%87%E7%BA%A7%E5%B9%B6%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8.html</url>
    <content><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>在服务器编译Docker Image的时候出现了异常，异常信息为内核版本过低，开始我使用uname -r看了一下内核版本，2.6…，是够低的。百度上查了很多，不过没成功过，我们直接上官网吧。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>Import the public key:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br></pre></td></tr></table></figure>

<p>Detailed info on the GPG key used by the ELRepo Project can be found on <a href="https://www.elrepo.org/tiki/key" target="_blank" rel="noopener">https://www.elrepo.org/tiki/key</a><br>If you have a system with Secure Boot enabled, please see the SecureBootKey page for more information.</p>
<p>To install ELRepo for RHEL-7, SL-7 or CentOS-7:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>To make use of our mirror system, please also install yum-plugin-fastestmirror.</p>
<p>To install ELRepo for RHEL-6, SL-6 or CentOS-6:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>To make use of our mirror system, please also install yum-plugin-fastestmirror.</p>
<h2 id="查看CentOS版本"><a href="#查看CentOS版本" class="headerlink" title="查看CentOS版本"></a>查看CentOS版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/issue</span><br></pre></td></tr></table></figure>

<h2 id="修改默认启动项"><a href="#修改默认启动项" class="headerlink" title="修改默认启动项"></a>修改默认启动项</h2><p>修改grub.conf中的default=0, 也就是你默认启动的版本，之后重新启动就OK啦。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost] vim /etc/grub.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># grub.conf generated by anaconda</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that you do not have to rerun grub after making changes to this file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NOTICE:  You have a /boot partition.  This means that</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#          all kernel and initrd paths are relative to /boot/, eg.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#          root (hd0,0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#          kernel /vmlinuz-version ro root=/dev/mapper/VolGroup-lv_root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#          initrd /initrd-[generic-]version.img</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#boot=/dev/sda</span></span><br><span class="line"></span><br><span class="line">default=0</span><br><span class="line"></span><br><span class="line">timeout=5</span><br></pre></td></tr></table></figure>

<h3 id="参考原文"><a href="#参考原文" class="headerlink" title="参考原文"></a>参考原文</h3><p>More info: <a href="http://elrepo.org/tiki/tiki-index.php" target="_blank" rel="noopener">http://elrepo.org</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Apple Magic Mouse卡顿的问题</title>
    <url>/AppleMagicMouse%E5%8D%A1%E9%A1%BF%E7%9A%84%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<blockquote>
<p>在公司使用<code>Apple Magic Mouse</code>时不时出现卡顿的现象，怀疑是信号干扰导致</p>
</blockquote>
<h2 id="检查速度因子"><a href="#检查速度因子" class="headerlink" title="检查速度因子"></a>检查速度因子</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">default read -g com.apple.mouse.scaling</span><br></pre></td></tr></table></figure>

<h2 id="修改速度因子"><a href="#修改速度因子" class="headerlink" title="修改速度因子"></a>修改速度因子</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">default write -g com.apple.mouse.scaling 7</span><br></pre></td></tr></table></figure>

<h2 id="关闭接力功能"><a href="#关闭接力功能" class="headerlink" title="关闭接力功能"></a>关闭接力功能</h2><blockquote>
<p><code>Hand-off</code>接力会使用<code>bluetooth</code>设备和相关频段，从而影响了蓝牙设备的通讯。<br>在<code>设置 - 通用</code>下关闭<code>接力</code></p>
</blockquote>
<p><img src="/images/49db41f09be64c56b8c05dbe17af2d58.png" alt="Hand-off"></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>参考链接：<a href="https://blog.csdn.net/Baby_come_here/article/details/125047030" target="_blank" rel="noopener">https://blog.csdn.net/Baby_come_here/article/details/125047030</a></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse使用SVN提交发生错误的处理方案</title>
    <url>/Eclipse%E4%BD%BF%E7%94%A8SVN%E6%8F%90%E4%BA%A4%E5%8F%91%E7%94%9F%E9%94%99%E8%AF%AF%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88.html</url>
    <content><![CDATA[<blockquote>
<p>在使用2023年9月的<code>Eclipse</code>的时候，使用<code>Subclipse</code>用于SVN版本管理的过程中，在提交代码的时候出现了错误。</p>
</blockquote>
<blockquote>
<p>这是一个eclipse的BUG，是由于SVN连接接口SVNKit的错误导致，SVNKit官方已经修复了这个BUG，但是Eclipse Marketplace还未关联。因此需要手动更新SVNKit，下面讲一下如何更新SVNKit</p>
</blockquote>
<h2 id="更新方法"><a href="#更新方法" class="headerlink" title="更新方法"></a>更新方法</h2><p>进入菜单栏<code>Help</code>-&gt;<code>Install New Software</code>，输入地址<code>https://eclipse.svnkit.com/1.10.x/</code>，等待下载更新完成后，重启<code>Eclipse</code>即可。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>BUG链接：<a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=576745" target="_blank" rel="noopener">https://bugs.eclipse.org/bugs/show_bug.cgi?id=576745</a></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Eureka server for Docker</title>
    <url>/Eureka-server-for-Docker.html</url>
    <content><![CDATA[<h2 id="Eureka简介"><a href="#Eureka简介" class="headerlink" title="Eureka简介"></a>Eureka简介</h2><p>Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。Spring Cloud将它集成在其子项目spring-cloud-netflix中，以实现Spring Cloud的服务发现功能。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="先上pom-xml文件"><a href="#先上pom-xml文件" class="headerlink" title="先上pom.xml文件"></a>先上pom.xml文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fiveplus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Eureka project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Dalston.SR4<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>spring-boot<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- Spring安全模块 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!--  Linux Service config</span></span><br><span class="line"><span class="comment">				&lt;configuration&gt;</span></span><br><span class="line"><span class="comment">					&lt;executable&gt;true&lt;/executable&gt;</span></span><br><span class="line"><span class="comment">				&lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">				 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- tag:plugin[] --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- end::plugin[] --&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的pom文件集成了spring-security安全模块，不需要的同学可以去掉。</p>
<h3 id="然后上application-properties"><a href="#然后上application-properties" class="headerlink" title="然后上application.properties"></a>然后上application.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8761</span></span><br><span class="line"></span><br><span class="line"><span class="meta">eureka.instance.hostname</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">eureka.instance.lease-renewal-interval-in-seconds</span>=<span class="string">30</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">eureka.server.enable-self-preservation</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">security.basic.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">security.user.name</span>=<span class="string">fiveplus</span></span><br><span class="line"><span class="meta">security.user.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="meta">eureka.client.service-url.default-zone</span>=<span class="string">http://$&#123;security.user.name&#125;:$&#123;security.user.password&#125;@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<h3 id="接下来是Application-java"><a href="#接下来是Application-java" class="headerlink" title="接下来是Application.java"></a>接下来是Application.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fiveplus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="然后编写Dockerfile"><a href="#然后编写Dockerfile" class="headerlink" title="然后编写Dockerfile"></a>然后编写Dockerfile</h3><p>在maven项目下新建文件夹src/main/docker，创建文件Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> frolvlad/alpine-oraclejdk8:slim</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> eureka-server-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="comment">#RUN bash -c 'touch /app.jar'</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8761</span></span><br></pre></td></tr></table></figure>

<h3 id="编译docker-image"><a href="#编译docker-image" class="headerlink" title="编译docker image"></a>编译docker image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean package docker:build -DskipTests</span><br></pre></td></tr></table></figure>

<h3 id="生产环境部署"><a href="#生产环境部署" class="headerlink" title="生产环境部署"></a>生产环境部署</h3><p>上传jar和Dockerfile文件到同一目录下，运行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t fiveplus/eureka-server .</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>EurekaServer</tag>
      </tags>
  </entry>
  <entry>
    <title>Haskell+Yesod入门教程</title>
    <url>/Haskell-Yesod%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>Haskell是一个比较偏的语言，但是对于理解函数式编程很有帮助，在日后使用其他函数式语言会有所帮助，比如说sacla语言。下面做一个Yesod Framework的教程。</p>
<p>Yesod是y一个Haskell的Web框架。</p>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>基于haskell进行构建。</p>
<ol>
<li><p>Follow the haskell-lang get started guide to get the Stack build tool.</p>
<p>On POSIX systems, this is usually</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.haskellstack.org/ | sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a new scaffolded site:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stack new my-project yesod-sqlite &amp;&amp; cd my-project</span><br></pre></td></tr></table></figure>

<p>NOTE: Use stack templates to see other available Yesod scaffoldings.</p>
</li>
</ol>
<ol start="3">
<li><p>Install the yesod command line tool:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stack install yesod-bin --install-ghc</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build libraries:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stack build</span><br></pre></td></tr></table></figure>
</li>
<li><p>Launch devel server:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stack exec -- yesod devel</span><br></pre></td></tr></table></figure>
</li>
<li><p>View your Yesod site at <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> <br></p>
</li>
<li><p>Add Handler </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stack exec -- yesod add-handler</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>这里我们编写一个Hello World的实例介绍</p>
<ol>
<li>在templeates目录下创建一个文件hello.hamlet。</li>
</ol>
<p>这是一个页面文件，相当于动态web语言中的页面，需要注意的是，在这里不需要写结尾标签。（搞不懂这个设计有啥好处）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">.ui.container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span>Go to World</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改路由文件config/routes</li>
</ol>
<p>&lt;请求路径&gt; &lt;控制层&gt; &lt;请求类型&gt;</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">/hello <span class="type">HelloR</span> <span class="type">GET</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编写控制层src/Handler/Hello.hs</li>
</ol>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&#123;-# LANGUAGE NoImplicitPrelude #-&#125;</span></span><br><span class="line"><span class="meta">&#123;-# LANGUAGE OverloadedStrings #-&#125;</span></span><br><span class="line"><span class="meta">&#123;-# LANGUAGE TemplateHaskell #-&#125;</span></span><br><span class="line"><span class="meta">&#123;-# LANGUAGE MultiParamTypeClasses #-&#125;</span></span><br><span class="line"><span class="meta">&#123;-# LANGUAGE TypeFamilies #-&#125;</span></span><br><span class="line"><span class="keyword">module</span> Handler.Hello <span class="keyword">where</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Import</span><br><span class="line"></span><br><span class="line"><span class="title">getHelloR</span> :: <span class="type">Handler</span> <span class="type">Html</span></span><br><span class="line"><span class="title">getHelloR</span> = <span class="keyword">do</span></span><br><span class="line">  (_, user) &lt;- requireAuthPair</span><br><span class="line">  defaultLayout $ <span class="keyword">do</span></span><br><span class="line">    setTitle . toHtml $ userIdent user &lt;&gt; <span class="string">"'s User page"</span></span><br><span class="line">    $(widgetFile <span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stack <span class="built_in">exec</span> -- yesod devel</span><br></pre></td></tr></table></figure>

<p>打开浏览器：<a href="http://localhost:3000/hello" target="_blank" rel="noopener">http://localhost:3000/hello</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>More info: <a href="https://www.yesodweb.com" target="_blank" rel="noopener">官网</a></p>
]]></content>
      <categories>
        <category>haskell</category>
      </categories>
      <tags>
        <tag>Haskell</tag>
        <tag>Yesod</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg常用基本命令</title>
    <url>/FFmpeg%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<h2 id="FFmpeg介绍"><a href="#FFmpeg介绍" class="headerlink" title="FFmpeg介绍"></a>FFmpeg介绍</h2><p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。</p>
<h2 id="FFmpeg常用基本命令"><a href="#FFmpeg常用基本命令" class="headerlink" title="FFmpeg常用基本命令"></a>FFmpeg常用基本命令</h2><h3 id="分离视频音频流"><a href="#分离视频音频流" class="headerlink" title="分离视频音频流"></a>分离视频音频流</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input_file -vcodec copy -an output_file_video　　//分离视频流</span><br><span class="line">ffmpeg -i input_file -acodec copy -vn output_file_audio　　//分离音频流</span><br></pre></td></tr></table></figure>

<h3 id="视频解复用"><a href="#视频解复用" class="headerlink" title="视频解复用"></a>视频解复用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg –i test.mp4 –vcodec copy –an –f m4v test.264</span><br><span class="line">ffmpeg –i test.avi –vcodec copy –an –f m4v test.264</span><br></pre></td></tr></table></figure>

<h3 id="视频转码"><a href="#视频转码" class="headerlink" title="视频转码"></a>视频转码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//转码为码流原始文件</span><br><span class="line">ffmpeg –i test.mp4 –vcodec h264 –s 352*278 –an –f m4v test.264</span><br><span class="line">//转码为码流原始文件</span><br><span class="line">ffmpeg –i test.mp4 –vcodec h264 –bf 0 –g 25 –s 352*278 –an –f m4v test.264</span><br><span class="line">//转码为封装文件</span><br><span class="line">ffmpeg –i test.avi -vcodec mpeg4 –vtag xvid –qsame test_xvid.avi</span><br><span class="line">//-bf B帧数目控制，-g 关键帧间隔控制，-s 分辨率控制</span><br></pre></td></tr></table></figure>

<h3 id="视频封装"><a href="#视频封装" class="headerlink" title="视频封装"></a>视频封装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg –i video_file –i audio_file –vcodec copy –acodec copy output_file</span><br></pre></td></tr></table></figure>

<h3 id="视频剪切"><a href="#视频剪切" class="headerlink" title="视频剪切"></a>视频剪切</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg –i test.avi –r 1 –f image2 image-%3d.jpeg        //提取图片</span><br><span class="line">ffmpeg -ss 0:1:30 -t 0:0:20 -i input.avi -vcodec copy -acodec copy output.avi    //剪切视频</span><br><span class="line">//-r 提取图像的频率，-ss 开始时间，-t 持续时间</span><br></pre></td></tr></table></figure>

<h3 id="视频录制"><a href="#视频录制" class="headerlink" title="视频录制"></a>视频录制</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg –i rtsp://192.168.3.205:5555/<span class="built_in">test</span> –vcodec copy out.avi</span><br></pre></td></tr></table></figure>

<h3 id="YUV序列播放"><a href="#YUV序列播放" class="headerlink" title="YUV序列播放"></a>YUV序列播放</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffplay -f rawvideo -video_size 1920x1080 input.yuv</span><br></pre></td></tr></table></figure>

<h3 id="YUV序列转AVI"><a href="#YUV序列转AVI" class="headerlink" title="YUV序列转AVI"></a>YUV序列转AVI</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg –s w*h –pix_fmt yuv420p –i input.yuv –vcodec mpeg4 output.avi</span><br></pre></td></tr></table></figure>

<h3 id="常用参数说明："><a href="#常用参数说明：" class="headerlink" title="常用参数说明："></a>常用参数说明：</h3><p><strong>主要参数：</strong></p>
<ul>
<li>-i 设定输入流</li>
<li>-f 设定输出格式</li>
<li>-ss 开始时间</li>
</ul>
<p><strong>视频参数：</strong></p>
<ul>
<li>-b 设定视频流量，默认为200Kbit/s</li>
<li>-r 设定帧速率，默认为25</li>
<li>-s 设定画面的宽与高</li>
<li>-aspect 设定画面的比例</li>
<li>-vn 不处理视频</li>
<li>-vcodec 设定视频编解码器，未设定时则使用与输入流相同的编解码器</li>
</ul>
<p><strong>音频参数：</strong></p>
<ul>
<li>-ar 设定采样率</li>
<li>-ac 设定声音的Channel数</li>
<li>-acodec 设定声音编解码器，未设定时则使用与输入流相同的编解码器</li>
<li>-an 不处理音频</li>
</ul>
]]></content>
      <categories>
        <category>ffmpeg</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Github Blog 搭建教程</title>
    <url>/Hexo-Github-Blog-%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<h2 id="Quick-Start-For-OSX"><a href="#Quick-Start-For-OSX" class="headerlink" title="Quick Start (For OSX)"></a>Quick Start (For OSX)</h2><h3 id="安装Xcode"><a href="#安装Xcode" class="headerlink" title="安装Xcode"></a>安装Xcode</h3><p>Hexo的编译可能依赖Xcode。这个直接从App Store上下载就好了，没什么难度。</p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>Hexo是基于node.js的，所以要去官网上下载下来安装。版本选择最新版的就可以了。</p>
<h3 id="注册GitHub账户"><a href="#注册GitHub账户" class="headerlink" title="注册GitHub账户"></a>注册GitHub账户</h3><p>在本地搭建好Hexo后可以将内容同步到github上，可以在网上浏览。<br>可以去Github官网上去注册。</p>
<p>创建一个项目：<you_github_name>.github.io</you_github_name></p>
<p>其中配置SSH Keys的那部分，可以选择不配制，不配置的话以后每次提交的时候就需要手动输入账号密码，如果配置了的话就不需要了。</p>
<h3 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli --no-optional</span><br></pre></td></tr></table></figure>

<p>进入安装目录，比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/hexo</span><br></pre></td></tr></table></figure>

<p>初始化hexo项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>初始化完成后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>至此，就已经安装完毕了。是不是很简单呢？</p>
<h3 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h3><p>在部署之前，首先我们要确认在你的Github帐号的Repository中有 用户名.github.io 的项目。在确认之后，在安装目录下执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后开始进行配置，在Hexo安装的目录，如 ~/Document/hexo 中找到_config.yml文件。翻到最后，找到 deploy 字样，改成如下格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/用户名/用名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>需要注意的是：冒号后面有一个空格；使用github可以不用写branch那一行。<br>如果要使用多个 deployer，可改成如下样式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo:</span><br><span class="line">- type: heroku</span><br><span class="line">  repo:</span><br></pre></td></tr></table></figure>

<h3 id="同步数据"><a href="#同步数据" class="headerlink" title="同步数据"></a>同步数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>或者缩写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>之后每次同步博客，依次执行以下三个命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h3 id="最后介绍几个常用插件"><a href="#最后介绍几个常用插件" class="headerlink" title="最后介绍几个常用插件"></a>最后介绍几个常用插件</h3><p>站点地图</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>

<p>生成的sitemap.xml可以给搜索引擎收录使用。<br>如果要生成百度的sitemap，使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure>

<p>RSS订阅</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed@1.0.3 --save</span><br></pre></td></tr></table></figure>

<p>配置文件里经常看见的/atom.xml就是由这个插件生成的</p>
<h3 id="参考原文"><a href="#参考原文" class="headerlink" title="参考原文"></a>参考原文</h3><p>More info: <a href="http://www.jianshu.com/p/ecd51e8ef2fa" target="_blank" rel="noopener">简书</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的Disqus评论被墙的解决方案</title>
    <url>/Hexo%E7%9A%84Disqus%E8%AF%84%E8%AE%BA%E8%A2%AB%E5%A2%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</url>
    <content><![CDATA[<blockquote>
<p>在Hexo中使用disqus评论系统不是难事，Next主题中已经有集成的部分，只要将<code>enable</code>修改为true，加上相应的<code>shortname</code>就可以使用，但是因为国内的监管制度而导致Disqus无法访问。</p>
</blockquote>
<h2 id="为什么使用Disqus"><a href="#为什么使用Disqus" class="headerlink" title="为什么使用Disqus?"></a>为什么使用Disqus?</h2><p>目前有的第三方评论工具，就我知道的有畅言、gitment、来必力。畅言需要备案，gitment用于<code>GitHub Issues</code>，因此必须有Git账号。其实最主要的担心是持续使用的问题，因此在这里选择使用Disqus。</p>
<p>那么问题来了，因为<code>disqus</code>不受控制，所以被墙挡在门外了，这个时候使用Disqus就必须翻墙了，刚开始安慰自己这是提高评论门槛，知道我看到了Git上的一个项目 <a href="https://link.jianshu.com/?t=https://github.com/fooleap/disqus-php-api" target="_blank" rel="noopener">disqus-php-api</a> ，可以利用境外VPS转发Disqus请求。</p>
<h2 id="disqus-php-api的配置"><a href="#disqus-php-api的配置" class="headerlink" title="disqus-php-api的配置"></a>disqus-php-api的配置</h2><blockquote>
<p>境外VPS这里我选择使用Vultr，推广链接：<a href="https://www.vultr.com/?ref=7158163" target="_blank" rel="noopener">https://www.vultr.com/?ref=7158163</a></p>
</blockquote>
<ul>
<li>系统环境：CentOS 7</li>
<li>安装环境：lnmp，git</li>
</ul>
<h3 id="Clone-disqus-php-api"><a href="#Clone-disqus-php-api" class="headerlink" title="Clone disqus-php-api"></a>Clone <code>disqus-php-api</code></h3><p>进入网站根目录，拷贝网站源码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/fooleap/disqus-php-api disqus</span><br></pre></td></tr></table></figure>

<p>修改api目录下的config.php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">'DISQUS_PUBKEY'</span>, <span class="string">'E8Uh5l5fHZ6gD8U3KycjAIAk46f68Zw7C6eW8WSjZvCLXebZ7p0r1yrYDrLilk2F'</span>);</span><br><span class="line">define(<span class="string">'DISQUS_USERNAME'</span>, <span class="string">'your-username'</span>);</span><br><span class="line">define(<span class="string">'DISQUS_EMAIL'</span>, <span class="string">'your-email@qq.com'</span>);</span><br><span class="line">define(<span class="string">'DISQUS_PASSWORD'</span>, <span class="string">'your-disqus-password'</span>);</span><br><span class="line">define(<span class="string">'DISQUS_WEBSITE'</span>, <span class="string">'your-website'</span>);</span><br><span class="line">define(<span class="string">'DISQUS_SHORTNAME'</span>, <span class="string">'your-disqus-shortname'</span>);</span><br><span class="line">define(<span class="string">'DISQUS_APPROVED'</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li><em>DISQUS_PUBKEY</em>：Disqus公钥，无需修改。</li>
<li><em>DISQUS_USERNAME</em>：Disqus注册用户名</li>
<li><em>DISQUS_EMAIL</em>：Disqus注册邮箱</li>
<li><em>DISQUS_PASSWORD</em>：Disqus密码</li>
<li><em>DISQUS_WEBSITE<em>：网站域名（这里的域名是Hexo站点的域名，切记）,如：</em><a href="https://fiveplus.github.io" target="_blank" rel="noopener">https://fiveplus.github.io</a></em></li>
<li><em>DISQUS_SHORTNAME</em>：网站在 Disqus 对应的 Shortname</li>
<li><em>DISQUS_APPROVED</em>：评论是否免审核，true 即跳过评论预审核，false 则按后台设置。</li>
</ol>
<h3 id="Next集成disqus-php-api"><a href="#Next集成disqus-php-api" class="headerlink" title="Next集成disqus-php-api"></a>Next集成disqus-php-api</h3><p>在主题配置文件<code>_config.yml</code>中添加disqus-php-api参数：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Disqus</span><br><span class="line">disqus:</span><br><span class="line">  enable: false</span><br><span class="line">  shortname: your-short-name</span><br><span class="line">  count: false</span><br><span class="line"></span><br><span class="line"># Disqus APi</span><br><span class="line">disqusapi:</span><br><span class="line">  enable: true</span><br><span class="line">  forum: 'your-forum'</span><br><span class="line">  site: 'your-site'</span><br><span class="line">  api: 'https://yoursite.com/disqus/api'</span><br><span class="line">  mode: 2</span><br><span class="line">  badge: '博主'</span><br><span class="line">  timeout: 3000</span><br></pre></td></tr></table></figure>

<ul>
<li>forum: Disqus的shortname</li>
<li>site: 网站域名（Hexo博客域名）</li>
<li>api: PHP代码部署地址的api路径</li>
<li>mode: <ul>
<li><code>1</code> 检测能否访问 Disqus，若能则加载 Disqus 原生评论框，超时则加载简易评论框。</li>
<li><code>2</code> 仅加载简易评论框。</li>
<li><code>3</code> 同时加载两种评论框，先显示简易评论框，Disqus 加载完成则切换至 Disqus 评论框。</li>
</ul>
</li>
<li>badge: 管理员徽章文本</li>
<li>timeout: 当mode为1时的超时时间</li>
</ul>
<h3 id="添加disqus-api模块"><a href="#添加disqus-api模块" class="headerlink" title="添加disqus-api模块"></a>添加disqus-api模块</h3><p>进入目录：<code>&lt;Hexo_floder&gt;/themes/next/layout/_third-party/comments/</code>，新建文件<code>disqusapi.swig</code>，内容如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.disqusapi.enable %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;Disqus WebSize&gt;/disqus/dist/iDisqus.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;Disqus WebSize&gt;/disqus/dist/iDisqus.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> emojiList = [&#123;</span></span><br><span class="line"><span class="actionscript">            code:<span class="string">'smile'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'笑脸'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f604'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'mask'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'生病'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f637'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'joy'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'破涕为笑'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f602'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'stuck_out_tongue_closed_eyes'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'吐舌'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f61d'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'flushed'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'脸红'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f633'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'scream'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'恐惧'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f631'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'pensive'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'失望'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f614'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'unamused'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'无语'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f612'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'grin'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'露齿笑'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f601'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'heart_eyes'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'色'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f60d'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'sweat'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'汗'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f613'</span></span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line"><span class="actionscript">            code:<span class="string">'smirk'</span>,</span></span><br><span class="line"><span class="actionscript">            title:<span class="string">'得意'</span>,</span></span><br><span class="line"><span class="actionscript">            unicode:<span class="string">'1f60f'</span></span></span><br><span class="line">        &#125;];</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> disq = <span class="keyword">new</span> iDisqus(<span class="string">'comments'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">            forum: <span class="string">'&#123;&#123; theme.disqusapi.forum &#125;&#125;'</span>,</span></span><br><span class="line"><span class="actionscript">            site: <span class="string">'&#123;&#123; theme.disqusapi.site &#125;&#125;'</span>,</span></span><br><span class="line"><span class="actionscript">            api: <span class="string">'&#123;&#123; theme.disqusapi.api &#125;&#125;'</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            mode: </span><span class="template-variable">&#123;&#123; theme.disqusapi.mode &#125;&#125;</span><span class="xml">,</span></span></span><br><span class="line"><span class="actionscript">            badge: <span class="string">'&#123;&#123; theme.disqusapi.badge &#125;&#125;'</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            timeout: </span><span class="template-variable">&#123;&#123; theme.disqusapi.timeout &#125;&#125;</span><span class="xml">,</span></span></span><br><span class="line"><span class="actionscript">            init: <span class="literal">true</span>,</span></span><br><span class="line">            emoji_list: emojiList</span><br><span class="line">        &#125;);</span><br><span class="line">        disq.count();</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><blockquote>
<p>如果你的Hexo是使用GitHub部署的，和上面的<code>disqus-php-api</code>不在一起，那么会出现跨域问题。</p>
</blockquote>
<p>将<code>init.php</code>中设置<code>Access-Control-Allow-Origin</code>部分：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Emojione</span>;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'config.php'</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'emojione/autoload.php'</span>);</span><br><span class="line">header(<span class="string">'Content-type:text/json'</span>);</span><br><span class="line">$origin = <span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_ORIGIN'</span>])? $_SERVER[<span class="string">'HTTP_ORIGIN'</span>] : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'(localhost|127\.0\.0\.1|'</span>.DISQUS_WEBSITE.<span class="string">')'</span>, $origin))&#123;</span><br><span class="line">    header(<span class="string">'Access-Control-Allow-Origin: '</span>.$origin);</span><br><span class="line">&#125;</span><br><span class="line">$client = <span class="keyword">new</span> Client(<span class="keyword">new</span> Ruleset());</span><br></pre></td></tr></table></figure>

<p>删除Access-Control-Allow-Origin 的代码，替换以下的代码：</p>
<p>(其中，变量 allow_origin 是你要允许可以调用你后端的域名网址，也可以设置为<code>*</code>允许所有)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Emojione</span>;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'config.php'</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'emojione/autoload.php'</span>);</span><br><span class="line">header(<span class="string">'Content-type:text/json'</span>);</span><br><span class="line"><span class="comment">//跨域访问的时候才会存在此字段</span></span><br><span class="line">$origin = <span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_ORIGIN'</span>]) ? $_SERVER[<span class="string">'HTTP_ORIGIN'</span>] : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">$allow_origin = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'https://fiveplus.github.io'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(in_array($origin, $allow_origin))&#123;</span><br><span class="line">    header(<span class="string">'Access-Control-Allow-Origin:'</span>.$origin);</span><br><span class="line">&#125;</span><br><span class="line">$client = <span class="keyword">new</span> Client(<span class="keyword">new</span> Ruleset());</span><br></pre></td></tr></table></figure>

<p>我在实际使用过程中，因为部署在GitHub，使用以上方式失败了，因此允许全域名访问。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Emojione</span>;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'config.php'</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">'emojione/autoload.php'</span>);</span><br><span class="line">header(<span class="string">'Content-type:text/json'</span>);</span><br><span class="line"><span class="comment">//跨域访问的时候才会存在此字段</span></span><br><span class="line">$origin = <span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_ORIGIN'</span>]) ? $_SERVER[<span class="string">'HTTP_ORIGIN'</span>] : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">header(<span class="string">'Access-Control-Allow-Origin: *'</span>);</span><br><span class="line"></span><br><span class="line">$client = <span class="keyword">new</span> Client(<span class="keyword">new</span> Ruleset());</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>本文参考了其他博友的资料，因为某些地方描述不够，导致出了一些问题，在这里补充重写一下。</p>
<p>本文出处：<a href="https://www.jianshu.com/p/2671b28b79e5" target="_blank" rel="noopener">https://www.jianshu.com/p/2671b28b79e5</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>disqus</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo站内检索插件安装</title>
    <url>/Hexo%E7%AB%99%E5%86%85%E6%A3%80%E7%B4%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia,Swiftype和Algolia都只有一段时间的试用期，可以采用Hexo提供的Local Search,原理是通过hexo-generator-search插件在本地生成一个search.xml文件，搜索的时候从这个文件中根据关键字检索出相应的链接。</p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>在站点根目录下执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>编辑站点配置文件_config.yml，新增以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>然后在主题配置文件下启用local_search</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h2 id="更多插件安装"><a href="#更多插件安装" class="headerlink" title="更多插件安装"></a>更多插件安装</h2><h3 id="安装hexo-generator-feed"><a href="#安装hexo-generator-feed" class="headerlink" title="安装hexo-generator-feed"></a>安装hexo-generator-feed</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>站点配置文件_config.yml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br></pre></td></tr></table></figure>

<p>在你的next主题下的_config.yml添加RSS订阅链接</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure>

<h3 id="给博客生成站点地图"><a href="#给博客生成站点地图" class="headerlink" title="给博客生成站点地图"></a>给博客生成站点地图</h3><p>安装hexo-generator-seo-friendly-sitemap</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件_config.yml 中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>重新上传后，即可看到站内搜索功能。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo阅读量api.leancloud.cn解析失败</title>
    <url>/Hexo%E9%98%85%E8%AF%BB%E9%87%8Fapi-leancloud-cn%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5.html</url>
    <content><![CDATA[<blockquote>
<p>近期，国家有关部门和运营商对网络基础设施进行了更严格的管制，其中包含一些针对 DNS 系统的调整。LeanCloud 国内节点 API 的老版域名 api.leancloud.cn 意外地受到了波及，因此在国外一些地区和国内少数地区会出现一定概率的解析错误（DNS 污染），在访问这个域名时可能会出现间歇性的失败。</p>
</blockquote>
<p>近期，刷新博客的时候发现阅读量无法显示，打开控制台，发现错误提示是无法访问api.leancloud.cn。</p>
<p>打开<code>https://app-router.leancloud.cn/2/route?appId=&lt;替换为 appId&gt;</code>，复制<code>api_server</code>后面的地址。（后面会有用）</p>
<p>打开<code>&lt;Hexo_Floder&gt;/themes/next/layout/_third-party/analytics/lean-analytics.swig</code>，找到链接<code>https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js</code>，下载文件保存到<code>&lt;Hexo Floder&gt;/source</code>，找到<code>av-core-mini-0.6.4.js</code>文件中<code>https://api.leancloud.cn</code>替换为刚刚复制的<code>api_server</code>的值。</p>
<p>打开网站配置文件<code>_config.yml</code>，找到<code>Directory</code>，在<code>skip_render</code>下加一行（注意空格）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- <span class="string">'js/av-core-mini-0.6.4.js'</span></span><br></pre></td></tr></table></figure>

<p>最后执行如下操作上传网站。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<p>再访问看看，就可以了。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>leancloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Java OCR [Tess4j]</title>
    <url>/Java-OCR-Tess4j.html</url>
    <content><![CDATA[<h2 id="OCR介绍"><a href="#OCR介绍" class="headerlink" title="OCR介绍"></a>OCR介绍</h2><p>OCR技术是光学字符识别的缩写(Optical Character Recognition)，是通过扫描等光学输入方式将各种票据、报刊、书籍、文稿及其它印刷品的文字转化为图像信息，再利用文字识别技术将图像信息转化为可以使用的计算机输入技术。可应用于银行票据、大量文字资料、档案卷宗、文案的录入和处理领域。适合于银行、税务等行业大量票据表格的自动扫描识别及长期存储。相对一般文本，通常以最终识别率、识别速度、版面理解正确率及版面还原满意度4个方面作为OCR技术的评测依据；而相对于表格及票据， 通常以识别率或整张通过率及识别速度为测定OCR技术的实用标准。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>tensoflow-ocr是谷歌开源的一个ocr文字识别功能，本次介绍的OCR如何与其他语言之一Java的结合调用，需要已经有tenslow-ocr的安装环境。</p>
<h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cms<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ocr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>ocr<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javacv<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   	<span class="comment">&lt;!-- tesseract-ocr 文字识别调用 --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.tess4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tess4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="需要的文件"><a href="#需要的文件" class="headerlink" title="需要的文件"></a>需要的文件</h3><ol>
<li>需要分析的图片文件</li>
<li>创建tessdata文件夹，并放入模型文件chi_sim.traineddata (训练集的制作在这里不做讲解)</li>
</ol>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>实际使用过程中，可能还需要对图像进行相关处理，如二值化、灰度化，文字图像捕捉等相关操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tess-OCR 文字识别</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"tess4j starting..."</span> );</span><br><span class="line">        File imgFile = <span class="keyword">new</span> File(<span class="string">"images/testhuang.png"</span>);</span><br><span class="line">        BufferedImage image = ImageIO.read(imgFile);</span><br><span class="line">        <span class="comment">//TODO 图像灰度化</span></span><br><span class="line">        <span class="comment">//image = ImageHelper.convertImageToGrayscale(image);</span></span><br><span class="line">        <span class="comment">//TODO 图像二值化</span></span><br><span class="line">        <span class="comment">//image = ImageHelper.convertImageToBinary(image);</span></span><br><span class="line">        <span class="comment">//ImageIO.write(image, "jpg", new File("gray.jpg"));</span></span><br><span class="line">        ITesseract instance = <span class="keyword">new</span> Tesseract(); <span class="comment">//JNA Interface Mapping</span></span><br><span class="line">        instance.setLanguage(<span class="string">"chi_sim"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">			String res = instance.doOCR(image);</span><br><span class="line">			System.out.println(res);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (TesseractException e) &#123;</span><br><span class="line">			System.out.println(e.getMessage());</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>有其他不足的部分，日后再做补充。</p>
]]></content>
      <categories>
        <category>ocr</category>
      </categories>
      <tags>
        <tag>ocr</tag>
      </tags>
  </entry>
  <entry>
    <title>Java图像截取</title>
    <url>/Java%E5%9B%BE%E5%83%8F%E6%88%AA%E5%8F%96.html</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>在仔细观察QQ空间的说说、微博以及微信的图文形式，它们的缩略图都是是对原图像经过一定的切割显示的图像，那么在我开发的<code>碎片云</code>中似乎也可以加上一个类似的功能。因此需要一个图像切割的方法完成这样类似的功能，具体的切割模式可以根据自己的实际需求来进行切割，下面就是核心方法<code>ImageUtil</code>的内容。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cloud.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Rectangle;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageReadParam;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageReader;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.stream.ImageInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageUtil</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">ImageUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getImageWidth</span><span class="params">(<span class="keyword">int</span> port,String url)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(url.indexOf(<span class="string">"attached"</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">				url = <span class="string">"http://127.0.0.1:"</span>+port+url;</span><br><span class="line">			&#125;</span><br><span class="line">			InputStream is = <span class="keyword">new</span> URL(url).openStream();</span><br><span class="line">			BufferedImage img = ImageIO.read(is);</span><br><span class="line">			<span class="keyword">return</span> img.getWidth();</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">			<span class="comment">//e.printStackTrace();</span></span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cutImage</span><span class="params">(String path,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> width,<span class="keyword">int</span> height)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(width &lt; <span class="number">1</span> || height &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">		FileInputStream is = <span class="keyword">null</span>;</span><br><span class="line">		ImageInputStream iis = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 读取图片文件</span></span><br><span class="line">			is = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">			<span class="comment">/* </span></span><br><span class="line"><span class="comment">             * 返回包含所有当前已注册 ImageReader 的 Iterator，这些 ImageReader 声称能够解码指定格式。 </span></span><br><span class="line"><span class="comment">             * 参数：formatName - 包含非正式格式名称 . （例如 "jpeg" 或 "tiff"）等 。 </span></span><br><span class="line"><span class="comment">             */</span> </span><br><span class="line">		 String fileEx = path.substring(path.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">            Iterator&lt;ImageReader&gt; it = ImageIO.getImageReadersByFormatName(fileEx);  </span><br><span class="line">            ImageReader reader = it.next();  </span><br><span class="line">            <span class="comment">// 获取图片流  </span></span><br><span class="line">            iis = ImageIO.createImageInputStream(is);  </span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * &lt;p&gt;iis:读取源.true:只向前搜索 &lt;/p&gt;.将它标记为 ‘只向前搜索’。 </span></span><br><span class="line"><span class="comment">             * 此设置意味着包含在输入源中的图像将只按顺序读取，可能允许 reader 避免缓存包含与以前已经读取的图像关联的数据的那些输入部分。 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            reader.setInput(iis, <span class="keyword">true</span>);  </span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * &lt;p&gt;描述如何对流进行解码的类&lt;p&gt;.用于指定如何在输入时从 Java Image I/O </span></span><br><span class="line"><span class="comment">             * 框架的上下文中的流转换一幅图像或一组图像。用于特定图像格式的插件 将从其 ImageReader 实现的 </span></span><br><span class="line"><span class="comment">             * getDefaultReadParam 方法中返回 ImageReadParam 的实例。 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            ImageReadParam param = reader.getDefaultReadParam();  </span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * 图片裁剪区域。Rectangle 指定了坐标空间中的一个区域，通过 Rectangle 对象 </span></span><br><span class="line"><span class="comment">             * 的左上顶点的坐标（x，y）、宽度和高度可以定义这个区域。 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            Rectangle rect = <span class="keyword">new</span> Rectangle(x, y, width, height);  </span><br><span class="line">            <span class="comment">// 提供一个 BufferedImage，将其用作解码像素数据的目标。  </span></span><br><span class="line">            param.setSourceRegion(rect);  </span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * 使用所提供的 ImageReadParam 读取通过索引 imageIndex 指定的对象，并将 它作为一个完整的 </span></span><br><span class="line"><span class="comment">             * BufferedImage 返回。 </span></span><br><span class="line"><span class="comment">             */</span>  </span><br><span class="line">            BufferedImage bi = reader.read(<span class="number">0</span>, param);  </span><br><span class="line">            <span class="comment">// 保存新图片  </span></span><br><span class="line">            ImageIO.write(bi, fileEx, <span class="keyword">new</span> File(path)); </span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">	            <span class="keyword">if</span> (is != <span class="keyword">null</span>)</span><br><span class="line">					is.close();</span><br><span class="line">	            <span class="keyword">if</span> (iis != <span class="keyword">null</span>) </span><br><span class="line">	                iis.close(); </span><br><span class="line">	        	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;  </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins+SpringBoot+Docker实战</title>
    <url>/Jenkins-SpringBoot-Docker%E5%AE%9E%E6%88%98.html</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h3><p>直接去官网下载就好了，这里给上链接：<a href="https://jenkins.io" target="_blank" rel="noopener">官网</a></p>
<h3 id="构建代码来源"><a href="#构建代码来源" class="headerlink" title="构建代码来源"></a>构建代码来源</h3><p>当你第一次使用Jenkins时，会默认安装git插件为你的默认代码来源，如果你使用其他的，比如SVN等，需要另外安装插件。（这里我使用的是Git）</p>
<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>单击左侧菜单”系统管理”，选择全局工具配置</p>
<ol>
<li>选择JDK安装，输入一个别名，JAVA_HOME填写你的JDK安装目录</li>
<li>在Git installations看到Path to Git executable，输入你的git运行路径（这里写全路径：eg: D:\Program Files\Git\bin\git.exe）</li>
<li>Maven这里选择自动安装就好了。</li>
</ol>
<h3 id="Jenkins创建项目"><a href="#Jenkins创建项目" class="headerlink" title="Jenkins创建项目"></a>Jenkins创建项目</h3><p>单击左侧菜单”新建Item”后，进入新页面，输入一个任务名称，并选择”构建一个maven项目”，单击确认。</p>
<h3 id="Jenkins项目配置"><a href="#Jenkins项目配置" class="headerlink" title="Jenkins项目配置"></a>Jenkins项目配置</h3><ol>
<li><p>选择源码管理选项卡，在Repository URL输入你的项目来源，选择Credentials后面的Add进行创建账号（在这里配置你的git账号）</p>
</li>
<li><p>选择构建分支”Branch Specifier (blank for ‘any’)”，这里默认会是*/master，可以根据需要修改。</p>
</li>
<li><p>触发器构建，建议使用WebHook，不过需要安装插件，这个在另一篇再讲。</p>
</li>
<li><p>Build下Root POM输入pom.xml，Goals and options输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clean install -P dev -Dmaven.test.skip=true -e</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后一步，选择SSH Publishers，在Transfers下单击Add Transfer Set，接下来是参数配置：</p>
<ul>
<li>Source files: target/*.jar (上传到目标服务器的文件)</li>
<li>Remove prefix: target/ （移除前置文件夹）</li>
<li>Remote directory: / （斜杠表示你配置的SSH Server的访问目录）</li>
<li>Exec command sh /jenkins/deploy.sh (执行远程shell，建议绝对路径)</li>
</ul>
</li>
</ol>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>不光光只是Spring-boot可以使用Jenkins进行代码构建，更多玩法大家可以自己发掘。</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC OSX环境下cordova+Ionic的安装配置</title>
    <url>/MAC-OSX%E7%8E%AF%E5%A2%83%E4%B8%8Bcordova-Ionic%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<blockquote>
<p>去年开始接触混合式开发APP，主要是精力有限，没办法再静下心来学swift语言的IOS开发了，开始的第一步就是环境搭建了，因为使用过Vue.js进行前端开发，所以已经有了npm和node的基础环境了。</p>
</blockquote>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h3><p>首先第一步就是检查基础安装环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>可以看到相应的版本号就表示成功。</p>
<h3 id="cordova安装"><a href="#cordova安装" class="headerlink" title="cordova安装"></a>cordova安装</h3><p>由于镜像在国外，网络不行，因此使用代理安装<code>cordova</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry http://registry.cnpmjs.org</span><br><span class="line">sudo npm install -g cordova</span><br></pre></td></tr></table></figure>

<p>输入下面命令测试是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cordova -v</span><br></pre></td></tr></table></figure>

<p>和上面一样，出现版本号就表示成功了。</p>
<h3 id="Ionic安装"><a href="#Ionic安装" class="headerlink" title="Ionic安装"></a>Ionic安装</h3><p>Ionic的安装就容易多了，直接命令行输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g ionic</span><br></pre></td></tr></table></figure>

<p>输入如下命令测试是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ionic -v</span><br></pre></td></tr></table></figure>

<h3 id="相关命令行"><a href="#相关命令行" class="headerlink" title="相关命令行"></a>相关命令行</h3><ul>
<li><code>ionic platform add android</code> 添加android平台</li>
<li><code>ionic platform add ios</code> 添加ios平台</li>
<li><code>ionic lib update</code> 版本库更新</li>
<li><code>ionic build android</code> 编译android项目</li>
<li><code>ionic emulate android</code>模拟器运行</li>
</ul>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>Ionic中的基础命令有时间再更新下，很久没写Ionic Webapp了，连环境也不记得怎么搭建了，在这里记录备份一下，用作使用参考。</p>
<p>More Info: <a href="https://ionicframework.com/docs/cli/" target="_blank" rel="noopener">https://ionicframework.com/docs/cli/</a></p>
]]></content>
      <categories>
        <category>Ionic</category>
      </categories>
      <tags>
        <tag>ionic</tag>
        <tag>cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程池实现原理及其在美团业务中的实践</title>
    <url>/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E5%9C%A8%E7%BE%8E%E5%9B%A2%E4%B8%9A%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5.html</url>
    <content><![CDATA[<blockquote>
<p>随着计算机行业的飞速发展，摩尔定律逐渐失效，多核CPU成为主流。使用多线程并行计算逐渐成为开发人员提升服务器性能的基本武器。J.U.C提供的线程池：ThreadPoolExecutor类，帮助开发人员管理线程并方便地执行并行任务。了解并合理使用线程池，是一个开发人员必修的基本功。</p>
</blockquote>
<blockquote>
<p>本文开篇简述线程池概念和用途，接着结合线程池的源码，帮助读者领略线程池的设计思路，最后回归实践，通过案例讲述使用线程池遇到的问题，并给出了一种动态化线程池解决方案。</p>
</blockquote>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="线程池是什么"><a href="#线程池是什么" class="headerlink" title="线程池是什么"></a>线程池是什么</h3><p>线程池（Thread Pool）是一种基于池化思想管理线程的工具，经常出现在多线程服务器中，如MySQL。</p>
<p>线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。</p>
<p>而本文描述线程池是JDK中提供的ThreadPoolExecutor类。</p>
<p>当然，使用线程池可以带来一系列好处：</p>
<ul>
<li><code>降低资源消耗</code>: 通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。</li>
<li><code>提高响应速度</code>: 任务到达时，无需等待线程创建即可立即执行。</li>
<li><code>提高线程的可管理性</code>: 线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。</li>
<li><code>提供更多更强大的功能</code>: 线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。</li>
</ul>
<h3 id="线程池解决的问题是什么"><a href="#线程池解决的问题是什么" class="headerlink" title="线程池解决的问题是什么"></a>线程池解决的问题是什么</h3><p>线程池解决的核心问题就是资源管理问题。在并发环境下，系统不能够确定在任意时刻中，有多少任务需要执行，有多少资源需要投入。这种不确定性将带来以下若干问题：</p>
<ol>
<li>频繁申请/销毁资源和调度资源，将带来额外的消耗，可能会非常巨大。</li>
<li>对资源无限申请缺少抑制手段，易引发系统资源耗尽的风险。</li>
<li>系统无法合理管理内部的资源分布，会降低系统的稳定性。</li>
</ol>
<p>为解决资源分配这个问题，线程池采用了“池化”（Pooling）思想。池化，顾名思义，是为了最大化收益并最小化风险，而将资源统一在一起管理的一种思想。</p>
<p>Pooling is the grouping together of resources (assets, equipment, personnel, effort, etc.) for the purposes of maximizing advantage or minimizing risk to the users. The term is used in finance, computing and equipment management.——wikipedia</p>
<p>“池化”思想不仅仅能应用在计算机领域，在金融、设备、人员管理、工作管理等领域也有相关的应用。</p>
<p>在计算机领域中的表现为：统一管理IT资源，包括服务器、存储、和网络资源等等。通过共享资源，使用户在低投入中获益。除去线程池，还有其他比较典型的几种使用策略包括：</p>
<ol>
<li>内存池(Memory Pooling)：预先申请内存，提升申请内存速度，减少内存碎片。</li>
<li>连接池(Connection Pooling)：预先申请数据库连接，提升申请连接的速度，降低系统的开销。</li>
<li>实例池(Object Pooling)：循环使用对象，减少资源在初始化和释放时的昂贵损耗。</li>
</ol>
<p>在了解完“是什么”和“为什么”之后，下面我们来一起深入一下线程池的内部实现原理。</p>
<h2 id="线程池核心设计与实现"><a href="#线程池核心设计与实现" class="headerlink" title="线程池核心设计与实现"></a>线程池核心设计与实现</h2><p>在前文中，我们了解到：线程池是一种通过“池化”思想，帮助我们管理线程而获取并发性的工具，在Java中的体现是ThreadPoolExecutor类。那么它的的详细设计与实现是什么样的呢？我们会在本章进行详细介绍。</p>
<h3 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h3><p>Java中的线程池核心实现类是ThreadPoolExecutor，本章基于JDK 1.8的源码来分析Java线程池的核心设计与实现。我们首先来看一下ThreadPoolExecutor的UML类图，了解下ThreadPoolExecutor的继承关系。</p>
<p><img src="/images/912883e51327e0c7a9d753d11896326511272.png" alt="Thread-Pool-Executor-UML"></p>
<p>ThreadPoolExecutor实现的顶层接口是Executor，顶层接口Executor提供了一种思想：将任务提交和任务执行进行解耦。用户无需关注如何创建线程，如何调度线程来执行任务，用户只需提供Runnable对象，将任务的运行逻辑提交到执行器(Executor)中，由Executor框架完成线程的调配和任务的执行部分。</p>
<p>ExecutorService接口增加了一些能力：（1）扩充执行任务的能力，补充可以为一个或一批异步任务生成Future的方法；（2）提供了管控线程池的方法，比如停止线程池的运行。AbstractExecutorService则是上层的抽象类，将执行任务的流程串联了起来，保证下层的实现只需关注一个执行任务的方法即可。最下层的实现类ThreadPoolExecutor实现最复杂的运行部分，ThreadPoolExecutor将会一方面维护自身的生命周期，另一方面同时管理线程和任务，使两者良好的结合从而执行并行任务。</p>
<p>ThreadPoolExecutor是如何运行，如何同时维护线程和执行任务的呢？其运行机制如下图所示：</p>
<p><img src="/images/77441586f6b312a54264e3fcf5eebe2663494.png" alt="Thread-Pool-Executor-流程"></p>
<p>线程池在内部实际上构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。线程池的运行主要分成两部分：任务管理、线程管理。任务管理部分充当生产者的角色，当任务提交后，线程池会判断该任务后续的流转：（1）直接申请线程执行该任务；（2）缓冲到队列中等待线程执行；（3）拒绝该任务。线程管理部分是消费者，它们被统一维护在线程池内，根据任务请求进行线程的分配，当线程执行完任务后则会继续获取新的任务去执行，最终当线程获取不到任务的时候，线程就会被回收。</p>
<p>接下来，我们会按照以下三个部分去详细讲解线程池运行机制：</p>
<ol>
<li>线程池如何维护自身状态。</li>
<li>线程池如何管理任务。</li>
<li>线程池如何管理线程。</li>
</ol>
<h3 id="生命周期管理"><a href="#生命周期管理" class="headerlink" title="生命周期管理"></a>生命周期管理</h3><p>线程池运行的状态，并不是用户显式设置的，而是伴随着线程池的运行，由内部来维护。线程池内部使用一个变量维护两个值：运行状态(runState)和线程数量 (workerCount)。在具体实现中，线程池将运行状态(runState)、线程数量 (workerCount)两个关键参数的维护放在了一起，如下代码所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p><code>ctl</code>这个AtomicInteger类型，是对线程池的运行状态和线程池中有效线程的数量进行控制的一个字段， 它同时包含两部分的信息：线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)，高3位保存runState，低29位保存workerCount，两个变量之间互不干扰。用一个变量去存储两个值，可避免在做相关决策时，出现不一致的情况，不必为了维护两者的一致，而占用锁资源。通过阅读线程池源代码也可以发现，经常出现要同时判断线程池运行状态和线程数量的情况。线程池也提供了若干方法去供用户获得线程池当前的运行状态、线程个数。这里都使用的是位运算的方式，相比于基本运算，速度也会快很多。</p>
<p>关于内部封装的获取生命周期状态、获取线程池线程数量的计算方法如以下代码所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125; <span class="comment">//计算当前运行状态</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;  <span class="comment">//计算当前线程数量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;   <span class="comment">//通过状态和线程数生成ctl</span></span><br></pre></td></tr></table></figure>

<p>ThreadPoolExecutor的运行状态有5种，分别为：</p>
<table>
<thead>
<tr>
<th>运行状态</th>
<th>状态描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>RUNNING</code></td>
<td>能接受新提交的任务，并且也能处理阻塞队列中的任务</td>
</tr>
<tr>
<td><code>SHUTDOWN</code></td>
<td>关闭状态，不再接受新提交的任务，但却可以继续处理阻塞队列中已保存的任务。</td>
</tr>
<tr>
<td><code>STOP</code></td>
<td>不能接受新任务，也不处理队列中的任务，会中断正在处理任务的线程</td>
</tr>
<tr>
<td><code>TIDYING</code></td>
<td>所有的任务都已终止了，workCount(有效线程数)为0。</td>
</tr>
<tr>
<td><code>TERMINATED</code></td>
<td>在terminated()方法执行完成后进入该状态。</td>
</tr>
</tbody></table>
<p>其生命周期转换如下入所示：</p>
<p><img src="/images/582d1606d57ff99aa0e5f8fc59c7819329028.png" alt="线程池生命周期"></p>
<h3 id="任务执行机制"><a href="#任务执行机制" class="headerlink" title="任务执行机制"></a>任务执行机制</h3><h4 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h4><p>任务调度是线程池的主要入口，当用户提交了一个任务，接下来这个任务将如何执行都是由这个阶段决定的。了解这部分就相当于了解了线程池的核心运行机制。</p>
<p>首先，所有任务的调度都是由execute方法完成的，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务。其执行过程如下：</p>
<ol>
<li>首先检测线程池运行状态，如果不是RUNNING，则直接拒绝，线程池要保证在RUNNING的状态下执行任务。</li>
<li>如果workerCount &lt; corePoolSize，则创建并启动一个线程来执行新提交的任务。</li>
<li>如果workerCount &gt;= corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中。</li>
<li>如果workerCount &gt;= corePoolSize &amp;&amp; workerCount &lt; maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务。</li>
<li>如果workerCount &gt;= maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。</li>
</ol>
<p>其执行流程如下图所示：</p>
<p><img src="/images/31bad766983e212431077ca8da92762050214.png" alt="任务调度流程"></p>
<h4 id="任务缓冲"><a href="#任务缓冲" class="headerlink" title="任务缓冲"></a>任务缓冲</h4><p>任务缓冲模块是线程池能够管理任务的核心部分。线程池的本质是对任务和线程的管理，而做到这一点最关键的思想就是将任务和线程两者解耦，不让两者直接关联，才可以做后续的分配工作。线程池中是以生产者消费者模式，通过一个阻塞队列来实现的。阻塞队列缓存任务，工作线程从阻塞队列中获取任务。</p>
<p>阻塞队列(BlockingQueue)是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p>
<p>下图中展示了线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素：</p>
<p><img src="/images/f4d89c87acf102b45be8ccf3ed83352a9497.png" alt="阻塞队列"></p>
<p>使用不同的队列可以实现不一样的任务存取策略。在这里，我们可以再介绍下阻塞队列的成员：</p>
<p><img src="/images/725a3db5114d95675f2098c12dc331c3316963.png" alt="阻塞队列-2"></p>
<h4 id="任务申请"><a href="#任务申请" class="headerlink" title="任务申请"></a>任务申请</h4><p>由上文的任务分配部分可知，任务的执行有两种可能：一种是任务直接由新创建的线程执行。另一种是线程从任务队列中获取任务然后执行，执行完任务的空闲线程会再次去从队列中申请任务再去执行。第一种情况仅出现在线程初始创建的时候，第二种是线程获取任务绝大多数的情况。</p>
<p>线程需要从任务缓存模块中不断地取任务执行，帮助线程从阻塞队列中获取任务，实现线程管理模块和任务管理模块之间的通信。这部分策略由getTask方法实现，其执行流程如下图所示：</p>
<p><img src="/images/49d8041f8480aba5ef59079fcc7143b996706.png" alt="获取任务流程图"></p>
<p>getTask这部分进行了多次判断，为的是控制线程的数量，使其符合线程池的状态。如果线程池现在不应该持有那么多线程，则会返回null值。工作线程Worker会不断接收新任务去执行，而当工作线程Worker接收不到任务的时候，就会开始被回收。</p>
<h4 id="任务拒绝"><a href="#任务拒绝" class="headerlink" title="任务拒绝"></a>任务拒绝</h4><p>任务拒绝模块是线程池的保护部分，线程池有一个最大的容量，当线程池的任务缓存队列已满，并且线程池中的线程数目达到maximumPoolSize时，就需要拒绝掉该任务，采取任务拒绝策略，保护线程池。</p>
<p>拒绝策略是一个接口，其设计如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户可以通过实现这个接口去定制拒绝策略，也可以选择JDK提供的四种已有拒绝策略，其特点如下：</p>
<p><img src="/images/9ffb64cc4c64c0cb8d38dac01c89c905178456-1.png" alt="拒绝策略"></p>
<h3 id="Worker线程管理"><a href="#Worker线程管理" class="headerlink" title="Worker线程管理"></a>Worker线程管理</h3><h4 id="Worker线程"><a href="#Worker线程" class="headerlink" title="Worker线程"></a>Worker线程</h4><p>线程池为了掌握线程的状态并维护线程的生命周期，设计了线程池内的工作线程Worker。我们来看一下它的部分代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread thread;<span class="comment">//Worker持有的线程</span></span><br><span class="line">    Runnable firstTask;<span class="comment">//初始化的任务，可以为null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Worker这个工作线程，实现了Runnable接口，并持有一个线程thread，一个初始化的任务firstTask。thread是在调用构造方法时通过ThreadFactory来创建的线程，可以用来执行任务；firstTask用它来保存传入的第一个任务，这个任务可以有也可以为null。如果这个值是非空的，那么线程就会在启动初期立即执行这个任务，也就对应核心线程创建时的情况；如果这个值是null，那么就需要创建一个线程去执行任务列表（workQueue）中的任务，也就是非核心线程的创建。</p>
<p>Worker执行任务的模型如下图所示：</p>
<p><img src="/images/03268b9dc49bd30bb63064421bb036bf90315.png" alt="Worker执行任务"></p>
<p>线程池需要管理线程的生命周期，需要在线程长时间不运行的时候进行回收。线程池使用一张Hash表去持有线程的引用，这样可以通过添加引用、移除引用这样的操作来控制线程的生命周期。这个时候重要的就是如何判断线程是否在运行。</p>
<p>​Worker是通过继承AQS，使用AQS来实现独占锁这个功能。没有使用可重入锁ReentrantLock，而是使用AQS，为的就是实现不可重入的特性去反应线程现在的执行状态。</p>
<p>lock方法一旦获取了独占锁，表示当前线程正在执行任务中。 2.如果正在执行任务，则不应该中断线程。 3.如果该线程现在不是独占锁的状态，也就是空闲的状态，说明它没有在处理任务，这时可以对该线程进行中断。 4.线程池在执行shutdown方法或tryTerminate方法时会调用interruptIdleWorkers方法来中断空闲的线程，interruptIdleWorkers方法会使用tryLock方法来判断线程池中的线程是否是空闲状态；如果线程是空闲状态则可以安全回收。</p>
<p>在线程回收过程中就使用到了这种特性，回收过程如下图所示：</p>
<p><img src="/images/9d8dc9cebe59122127460f81a98894bb34085-2.png" alt="线程池回收过程"></p>
<h4 id="Worker线程增加"><a href="#Worker线程增加" class="headerlink" title="Worker线程增加"></a>Worker线程增加</h4><p>增加线程是通过线程池中的addWorker方法，该方法的功能就是增加一个线程，该方法不考虑线程池是在哪个阶段增加的该线程，这个分配线程的策略是在上个步骤完成的，该步骤仅仅完成增加线程，并使它运行，最后返回是否成功这个结果。addWorker方法有两个参数：firstTask、core。firstTask参数用于指定新增的线程执行的第一个任务，该参数可以为空；core参数为true表示在新增线程时会判断当前活动线程数是否少于corePoolSize，false表示新增线程前需要判断当前活动线程数是否少于maximumPoolSize，其执行流程如下图所示：</p>
<p><img src="/images/49527b1bb385f0f43529e57b614f59ae145454.png" alt="申请线程执行流程图"></p>
<h4 id="Worker线程回收"><a href="#Worker线程回收" class="headerlink" title="Worker线程回收"></a>Worker线程回收</h4><p>线程池中线程的销毁依赖JVM自动的回收，线程池做的工作是根据当前线程池的状态维护一定数量的线程引用，防止这部分线程被JVM回收，当线程池决定哪些线程需要回收时，只需要将其引用消除即可。Worker被创建出来后，就会不断地进行轮询，然后获取任务去执行，核心线程可以无限等待获取任务，非核心线程要限时获取任务。当Worker无法获取到任务，也就是获取的任务为空时，循环会结束，Worker会主动消除自身在线程池内的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">//执行任务</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  processWorkerExit(w, completedAbruptly);<span class="comment">//获取不到任务时，主动回收自己</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程回收的工作是在processWorkerExit方法完成的。</p>
<p><img src="/images/90ea093549782945f2c968403fdc39d415386.png" alt="线程销毁流程"></p>
<p>事实上，在这个方法中，将线程引用移出线程池就已经结束了线程销毁的部分。但由于引起线程销毁的可能性有很多，线程池还要判断是什么引发了这次销毁，是否要改变线程池的现阶段状态，是否要根据新状态，重新分配线程。</p>
<h4 id="Worker线程执行任务"><a href="#Worker线程执行任务" class="headerlink" title="Worker线程执行任务"></a>Worker线程执行任务</h4><p>在Worker类中的run方法调用了runWorker方法来执行任务，runWorker方法的执行过程如下：</p>
<ol>
<li>while循环不断地通过getTask()方法获取任务。</li>
<li>getTask()方法从阻塞队列中取任务。 </li>
<li>如果线程池正在停止，那么要保证当前线程是中断状态，否则要保证当前线程不是中断状态。 </li>
<li>执行任务。 </li>
<li>如果getTask结果为null则跳出循环，执行processWorkerExit()方法，销毁线程。</li>
</ol>
<p>执行流程如下图所示：</p>
<p><img src="/images/879edb4f06043d76cea27a3ff358cb1d45243.png" alt="执行任务流程"></p>
<h2 id="线程池在业务中的实践"><a href="#线程池在业务中的实践" class="headerlink" title="线程池在业务中的实践"></a>线程池在业务中的实践</h2><h3 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h3><p>在当今的互联网业界，为了最大程度利用CPU的多核性能，并行运算的能力是不可或缺的。通过线程池管理线程获取并发性是一个非常基础的操作，让我们来看两个典型的使用线程池获取并发性的场景。</p>
<p><strong>场景1：快速响应用户请求</strong></p>
<p><code>描述</code>：用户发起的实时请求，服务追求响应时间。比如说用户要查看一个商品的信息，那么我们需要将商品维度的一系列信息如商品的价格、优惠、库存、图片等等聚合起来，展示给用户。</p>
<p><code>分析</code>：从用户体验角度看，这个结果响应的越快越好，如果一个页面半天都刷不出，用户可能就放弃查看这个商品了。而面向用户的功能聚合通常非常复杂，伴随着调用与调用之间的级联、多级级联等情况，业务开发同学往往会选择使用线程池这种简单的方式，将调用封装成任务并行的执行，缩短总体响应时间。另外，使用线程池也是有考量的，这种场景最重要的就是获取最大的响应速度去满足用户，所以应该不设置队列去缓冲并发任务，调高corePoolSize和maxPoolSize去尽可能创造多的线程快速执行任务。</p>
<p><img src="/images/e9a363c8577f211577e4962e9110cb0226733.png" alt="并行执行任务提升任务响应速度"></p>
<p><strong>场景2：快速处理批量任务</strong></p>
<p><code>描述</code>：离线的大量计算任务，需要快速执行。比如说，统计某个报表，需要计算出全国各个门店中有哪些商品有某种属性，用于后续营销策略的分析，那么我们需要查询全国所有门店中的所有商品，并且记录具有某属性的商品，然后快速生成报表。</p>
<p><code>分析</code>：这种场景需要执行大量的任务，我们也会希望任务执行的越快越好。这种情况下，也应该使用多线程策略，并行计算。但与响应速度优先的场景区别在于，这类场景任务量巨大，并不需要瞬时的完成，而是关注如何使用有限的资源，尽可能在单位时间内处理更多的任务，也就是吞吐量优先的问题。所以应该设置队列去缓冲并发任务，调整合适的corePoolSize去设置处理任务的线程数。在这里，设置的线程数过多可能还会引发线程上下文切换频繁的问题，也会降低处理任务的速度，降低吞吐量。</p>
<p><img src="/images/1a1746f33bfdcb03da074d8539ebb2f367563.png" alt="并行执行任务提升批量任务响应速度"></p>
<h3 id="实际问题及方案思考"><a href="#实际问题及方案思考" class="headerlink" title="实际问题及方案思考"></a>实际问题及方案思考</h3><p>线程池使用面临的核心的问题在于：<strong>线程池的参数并不好配置</strong>，一方面线程池的运行机制不是很好理解，配置合理需要强依赖开发人员的个人经验和知识；另一方面，线程池执行的情况和任务类型相关性较大，IO密集型和CPU密集型的任务运行起来的情况差异非常大，这导致业界并没有一些成熟的经验策略帮助开发人员参考。</p>
<p>关于线程池配置不合理引发的故障，公司内部有较多记录，下面举一些例子：</p>
<p><code>Case1</code>: 2018年XX页面展示接口大量调用降级</p>
<p><code>事故描述</code>: XX页面展示接口产生大量调用降级，数量级在几十到上百。</p>
<p><code>事故原因</code>: 该服务展示接口内部逻辑使用线程池做并行计算，由于没有预估好调用的流量，导致最大核心数设置偏小，大量抛出RejectedExecutionException，触发接口降级条件，示意图如下：</p>
<p><img src="/images/1df932840b31f41931bb69e16be2932844240.png" alt="线程池核心设置过小引发RejectExecutionException"></p>
<p><code>Case2</code>：2018年XX业务服务不可用S2级故障</p>
<p><code>事故描述</code>：XX业务提供的服务执行时间过长，作为上游服务整体超时，大量下游服务调用失败。</p>
<p><code>事故原因</code>：该服务处理请求内部逻辑使用线程池做资源隔离，由于队列设置过长，最大线程数设置失效，导致请求数量增加时，大量任务堆积在队列中，任务执行时间过长，最终导致下游服务的大量调用超时失败。示意图如下：</p>
<p><img src="/images/668e3c90f4b918bfcead2f4280091e9757284.png" alt="线程池队列长度设置过长，corePoolSize设置过小导致执行速度低"></p>
<p>业务中要使用线程池，而使用不当又会导致故障，那么我们怎样才能更好地使用线程池呢？针对这个问题，我们下面延展几个方向：</p>
<ol>
<li>能否不用线程池?</li>
</ol>
<p>回到最初的问题，业务使用线程池是为了获取并发性，对于获取并发性，是否可以有什么其他的方案呢替代？我们尝试进行了一些其他方案的调研：</p>
<p><img src="/images/56ab763273b2c03b2f1c37db7b150338414771.png" alt="并发框架"></p>
<p>综合考虑，这些新的方案都能在某种情况下提升并行任务的性能，然而本次重点解决的问题是如何更简易、更安全地获得的并发性。另外，Actor模型的应用实际上甚少，只在Scala中使用广泛，协程框架在Java中维护的也不成熟。这三者现阶段都不是足够的易用，也并不能解决业务上现阶段的问题。</p>
<ol start="2">
<li>追求参数设置合理性？</li>
</ol>
<p>有没有一种计算公式，能够让开发同学很简易地计算出某种场景中的线程池应该是什么参数呢？</p>
<p>带着这样的疑问，我们调研了业界的一些线程池参数配置方案：</p>
<p><img src="/images/23a44974ff68a08261fb675242b83648181953.png" alt="方案"></p>
<p>调研了以上业界方案后，我们并没有得出通用的线程池计算方式。并发任务的执行情况和任务类型相关，IO密集型和CPU密集型的任务运行起来的情况差异非常大，但这种占比是较难合理预估的，这导致很难有一个简单有效的通用公式帮我们直接计算出结果。</p>
<ol start="3">
<li>线程池参数动态化？</li>
</ol>
<p>尽管经过谨慎的评估，仍然不能够保证一次计算出来合适的参数，那么我们是否可以将修改线程池参数的成本降下来，这样至少可以发生故障的时候可以快速调整从而缩短故障恢复的时间呢？基于这个思考，我们是否可以将线程池的参数从代码中迁移到分布式配置中心上，实现线程池参数可动态配置和即时生效，线程池参数动态化前后的参数修改流程对比如下：</p>
<p><img src="/images/c6caa5be64f39758ada0593b995d65fd25982.png" alt="动态修改线程池参数新旧流程对比"></p>
<p>基于以上三个方向对比，我们可以看出参数动态化方向简单有效。</p>
<h3 id="动态化线程池"><a href="#动态化线程池" class="headerlink" title="动态化线程池"></a>动态化线程池</h3><h4 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h4><p>动态化线程池的核心设计包括以下三个方面：</p>
<ol>
<li>简化线程池配置：线程池构造参数有8个，但是最核心的是3个：corePoolSize、maximumPoolSize，workQueue，它们最大程度地决定了线程池的任务分配和线程分配策略。考虑到在实际应用中我们获取并发性的场景主要是两种：（1）并行执行子任务，提高响应速度。这种情况下，应该使用同步队列，没有什么任务应该被缓存下来，而是应该立即执行。（2）并行执行大批次任务，提升吞吐量。这种情况下，应该使用有界队列，使用队列去缓冲大批量的任务，队列容量必须声明，防止任务无限制堆积。所以线程池只需要提供这三个关键参数的配置，并且提供两种队列的选择，就可以满足绝大多数的业务需求，Less is More。</li>
<li>参数可动态修改：为了解决参数不好配，修改参数成本高等问题。在Java线程池留有高扩展性的基础上，封装线程池，允许线程池监听同步外部的消息，根据消息进行修改配置。将线程池的配置放置在平台侧，允许开发同学简单的查看、修改线程池配置。</li>
<li>增加线程池监控：对某事物缺乏状态的观测，就对其改进无从下手。在线程池执行任务的生命周期添加监控能力，帮助开发同学了解线程池状态。</li>
</ol>
<p><img src="/images/4d5c410ad23782350cc9f980787151fd54144.png" alt="动态线程池整体设计"></p>
<h4 id="功能架构"><a href="#功能架构" class="headerlink" title="功能架构"></a>功能架构</h4><p>动态化线程池提供如下功能：</p>
<p><code>动态调参</code>：支持线程池参数动态调整、界面化操作；包括修改线程池核心大小、最大核心大小、队列长度等；参数修改后及时生效。 </p>
<p><code>任务监控</code>：支持应用粒度、线程池粒度、任务粒度的Transaction监控；可以看到线程池的任务执行情况、最大任务执行时间、平均任务执行时间、95/99线等。 </p>
<p><code>负载告警</code>：线程池队列任务积压到一定值的时候会通过大象（美团内部通讯工具）告知应用开发负责人；当线程池负载数达到一定阈值的时候会通过大象告知应用开发负责人。 </p>
<p><code>操作监控</code>：创建/修改和删除线程池都会通知到应用的开发负责人。 </p>
<p><code>操作日志</code>：可以查看线程池参数的修改记录，谁在什么时候修改了线程池参数、修改前的参数值是什么。 </p>
<p><code>权限校验</code>：只有应用开发负责人才能够修改应用的线程池参数。</p>
<p><img src="/images/6c0091e92e90f50f89fd83f3b9eb5472135718.png" alt="动态化线程池功能架构"></p>
<p><strong>参数动态化</strong></p>
<p>JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：</p>
<p><img src="/images/efd32f1211e9cf0a3ca9d35b0dc5de8588353.png" alt="JDK线程池参数设置接口"></p>
<p>JDK允许线程池使用方通过ThreadPoolExecutor的实例来动态设置线程池的核心策略，以setCorePoolSize为方法例，在运行期线程池使用方调用此方法设置corePoolSize之后，线程池会直接覆盖原来的corePoolSize值，并且基于当前值和原始值的比较结果采取不同的处理策略。对于当前值小于当前工作线程数的情况，说明有多余的worker线程，此时会向当前idle的worker线程发起中断请求以实现回收，多余的worker在下次idel的时候也会被回收；对于当前值大于原始值且当前队列中有待执行任务，则线程池会创建新的worker线程来执行队列任务，setCorePoolSize具体流程如下：</p>
<p><img src="/images/9379fe1666818237f842138812bf63bd85645.png" alt="setCorePoolSize方法执行流程"></p>
<p>线程池内部会处理好当前状态做到平滑修改，其他几个方法限于篇幅，这里不一一介绍。重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。基于以上的思路，我们实现了线程池参数的动态化、线程池参数在管理平台可配置可修改，其效果图如下图所示：</p>
<p><img src="/images/414ba7f3abd11e5f805c58635ae10988166121.png" alt="可动态修改线程池参数"></p>
<p>用户可以在管理平台上通过线程池的名字找到指定的线程池，然后对其参数进行修改，保存后会实时生效。目前支持的动态参数包括核心数、最大值、队列长度等。除此之外，在界面中，我们还能看到用户可以配置是否开启告警、队列等待任务告警阈值、活跃度告警等等。关于监控和告警，我们下面一节会对齐进行介绍。</p>
<p><strong>线程池监控</strong></p>
<p>除了参数动态化之外，为了更好地使用线程池，我们需要对线程池的运行状况有感知，比如当前线程池的负载是怎么样的？分配的资源够不够用？任务的执行情况是怎么样的？是长任务还是短任务？基于对这些问题的思考，动态化线程池提供了多个维度的监控和告警能力，包括：线程池活跃度、任务的执行Transaction（频率、耗时）、Reject异常、线程池内部统计信息等等，既能帮助用户从多个维度分析线程池的使用情况，又能在出现问题第一时间通知到用户，从而避免故障或加速故障恢复。</p>
<ol>
<li>负载监控和告警</li>
</ol>
<p>线程池负载关注的核心问题是：基于当前线程池参数分配的资源够不够。对于这个问题，我们可以从事前和事中两个角度来看。事前，线程池定义了“活跃度”这个概念，来让用户在发生Reject异常之前能够感知线程池负载问题，线程池活跃度计算公式为：线程池活跃度 = activeCount/maximumPoolSize。这个公式代表当活跃线程数趋向于maximumPoolSize的时候，代表线程负载趋高。事中，也可以从两方面来看线程池的过载判定条件，一个是发生了Reject异常，一个是队列中有等待任务（支持定制阈值）。以上两种情况发生了都会触发告警，告警信息会通过大象推送给服务所关联的负责人。</p>
<p><img src="/images/04e73f7186a91d99181e1b5615ce9e4a318600.png" alt="告警通知"></p>
<ol start="2">
<li>任务级精细化监控</li>
</ol>
<p>在传统的线程池应用场景中，线程池中的任务执行情况对于用户来说是透明的。比如在一个具体的业务场景中，业务开发申请了一个线程池同时用于执行两种任务，一个是发消息任务、一个是发短信任务，这两类任务实际执行的频率和时长对于用户来说没有一个直观的感受，很可能这两类任务不适合共享一个线程池，但是由于用户无法感知，因此也无从优化。动态化线程池内部实现了任务级别的埋点，且允许为不同的业务任务指定具有业务含义的名称，线程池内部基于这个名称做Transaction打点，基于这个功能，用户可以看到线程池内部任务级别的执行情况，且区分业务，任务监控示意图如下图所示：</p>
<p><img src="/images/cd0b9445c3c93a866201b7cfb24d2ce7214776.png" alt="线程池任务执行监控"></p>
<ol start="3">
<li>运行时状态实时查看</li>
</ol>
<p>用户基于JDK原生线程池ThreadPoolExecutor提供的几个public的getter方法，可以读取到当前线程池的运行状态以及参数，如下图所示：</p>
<p><img src="/images/aba8d9c09e6f054c7061ddd720a04a26147951.png" alt="线程池实时运行情况"></p>
<p>动态化线程池基于这几个接口封装了运行时状态实时查看的功能，用户基于这个功能可以了解线程池的实时状态，比如当前有多少个工作线程，执行了多少个任务，队列中等待的任务数等等。效果如下图所示：</p>
<p><img src="/images/38d5fbeaebd4998f3a30d44bd20b996f113233-1.png" alt="线程池实时运行情况"></p>
<h3 id="实践总结"><a href="#实践总结" class="headerlink" title="实践总结"></a>实践总结</h3><p>面对业务中使用线程池遇到的实际问题，我们曾回到支持并发性问题本身来思考有没有取代线程池的方案，也曾尝试着去追求线程池参数设置的合理性，但面对业界方案具体落地的复杂性、可维护性以及真实运行环境的不确定性，我们在前两个方向上可谓“举步维艰”。最终，我们回到线程池参数动态化方向上探索，得出一个且可以解决业务问题的方案，虽然本质上还是没有逃离使用线程池的范畴，但是在成本和收益之间，算是取得了一个很好的平衡。成本在于实现动态化以及监控成本不高，收益在于：在不颠覆原有线程池使用方式的基础之上，从降低线程池参数修改的成本以及多维度监控这两个方面降低了故障发生的概率。希望本文提供的动态化线程池思路能对大家有帮助。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>参考链接：<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener">https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins+WebHooks (gitee.com)</title>
    <url>/Jenkins-WebHooks-gitee-com.html</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h3><p>插件名称：Generic Webhook Trigger</p>
<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><ol>
<li>单击左侧菜单”系统管理”, 选择”管理插件”，选择”可选插件选项卡”</li>
<li>在上面的搜索框输入Generic Webhook Trigger搜索进行安装</li>
</ol>
<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>选择你的项目，并找到配置，找到构建触发器配置，Generic Webhook Trigger打勾即可。</p>
<h3 id="WebHook配置"><a href="#WebHook配置" class="headerlink" title="WebHook配置"></a>WebHook配置</h3><p>接下来是WebHook配置，这里选择Push，表示在每次Push后进行构建代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://&lt;username&gt;:&lt;API token&gt;@&lt;server ip&gt;:&lt;server port&gt;/generic-webhook-trigger/invoke</span><br></pre></td></tr></table></figure>

<p>这里的API token在用户列表中选择相关用户，并选择设置，在API Token中单击show API Token即可找到。</p>
<h3 id="其他解决方案"><a href="#其他解决方案" class="headerlink" title="其他解决方案"></a>其他解决方案</h3><p>选择构建触发器下的Poll SCM，在日程表里输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H */2 * * *</span><br></pre></td></tr></table></figure>

<p>上面的代码表示每两个小时检查一次代码，如果有更新则重新进行构建。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>在实际使用的过程中，当有多个项目在Jenkins中启动自动化的时候，push代码会导致多个项目的Jenkins任务全部启动，配置Request params，查阅搜索引擎无果，如果有好的解决方案，希望大家在评论区回复我。（评论区使用的是Disqus评论）</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCore升级不受支持的macbook</title>
    <url>/OpenCore%E5%8D%87%E7%BA%A7%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81%E7%9A%84macbook.html</url>
    <content><![CDATA[<blockquote>
<p>macbook2015pro已经不在macOS Sonoma支持范围内，本文讲解macbook2015pro如何升级到macOS Sonoma</p>
</blockquote>
<h2 id="创建安装程序"><a href="#创建安装程序" class="headerlink" title="创建安装程序"></a>创建安装程序</h2><p>借助 OpenCore Legacy Patcher，我们的新 GUI 包含 macOS 安装程序的下载菜单。因此，首先，您需要获取我们的应用程序：<a href="https://github.com/dortania/OpenCore-Legacy-Patcher/releases" target="_blank" rel="noopener">https://github.com/dortania/OpenCore-Legacy-Patcher/releases</a></p>
<p>在本指南中，我们将使用标准 OpenCore-Patcher (GUI)。</p>
<p>下载后，打开应用程序，您应该会看到以下菜单：</p>
<p><img src="/images/OCLP-GUI-Main-Menu.40fc1dad.png" alt="OCLP-GUI-Main-Menu"></p>
<p>首先，我们要选择“创建 macOS 安装程序”按钮。这将为您提供 2 个选项：</p>
<p><img src="/images/OCLP-GUI-Create-Installer-Menu.6220ded8.png" alt="OCLP-GUI-Main-Menu"></p>
<p>对于此示例，我们假设您需要一个安装程序。选择此选项将下载 Apple 的安装程序目录并构建一个列表供您选择：</p>
<table>
<thead>
<tr>
<th>正在下载</th>
<th>列出的安装商</th>
<th>不受支持的安装程序</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/OCLP-GUI-Installer-Download-Catalog.cb53a9a5.png" alt="OCLP-GUI-Installer-Download-Catalog"></td>
<td><img src="/images/OCLP-GUI-Installer-Download-Listed-Products.e77dd4c3.png" alt="OCLP-GUI-Installer-Download-Listed-Products"></td>
<td><img src="/images/OCLP-GUI-Installer-Download-Unsupported.c42dd553.png" alt="OCLP-GUI-Installer-Download-Unsupported"></td>
</tr>
</tbody></table>
<p>由于修补程序正式支持 Big Sur 和更新版本的修补程序，因此只会显示那些完整的修补程序。对于我们自己来说，我们将选择 macOS 12，因为这是撰写本文时的最新公开版本。这会将 macOS 安装程序下载并安装到您的应用程序文件夹中。</p>
<blockquote>
<p>请注意，macOS Ventura 当前可能不支持某些计算机（即 2012 年及更早版本）。如果您看到此提示，则您需要使用旧版本的 macOS。</p>
</blockquote>
<table>
<thead>
<tr>
<th>下载安装程序</th>
<th>请求安装</th>
<th>安装完成</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/OCLP-GUI-Installer-Download-Progress.84e96f79.png" alt="OCLP-GUI-Installer-Download-Progress"></td>
<td><img src="/images/OCLP-GUI-Installer-Needs-Installing.297e4912.png" alt="OCLP-GUI-Installer-Needs-Installing"></td>
<td><img src="/images/OCLP-GUI-Installer-Download-Finished.ecc832c2.png" alt="OCLP-GUI-Installer-Download-Finished"></td>
</tr>
</tbody></table>
<p>完成后，您可以继续将安装程序写入 USB 驱动器。</p>
<blockquote>
<p>注意：整个 USB 驱动器将被格式化</p>
</blockquote>
<table>
<thead>
<tr>
<th>选择下载的安装程序</th>
<th>选择要格式化的磁盘</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/OCLP-GUI-Installer-Select-Local-Installer.88e785bd.png" alt="OCLP-GUI-Installer-Select-Local-Installer"></td>
<td><img src="/images/OCLP-GUI-Installer-Format-USB.a14e2cea.png" alt="OCLP-GUI-Installer-Format-USB"></td>
</tr>
</tbody></table>
<p>现在修补程序将开始安装程序闪烁！</p>
<table>
<thead>
<tr>
<th>闪烁</th>
<th>成功提示</th>
<th>闪烁完成</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/OCLP-GUI-Installer-Flashing-Process.1d538441.png" alt="OCLP-GUI-Installer-Flashing-Process"></td>
<td><img src="/images/OCLP-GUI-Installer-Sucess-Prompt.d2daa669.png" alt="OCLP-GUI-Installer-Sucess-Prompt"></td>
<td><img src="/images/OCLP-GUI-Installer-Finished-Script.554b202c.png" alt="OCLP-GUI-Installer-Finished-Script"></td>
</tr>
</tbody></table>
<p>完成后，前往构建和安装 OpenCore</p>
<h2 id="构建和安装-OpenCore"><a href="#构建和安装-OpenCore" class="headerlink" title="构建和安装 OpenCore"></a>构建和安装 OpenCore</h2><p>现在我们已经有了 macOS 安装程序，现在让我们构建 OpenCore 配置！</p>
<p>如果您尚未下载 OpenCore Patcher，请立即下载：<a href="https://github.com/dortania/OpenCore-Legacy-Patcher/releases" target="_blank" rel="noopener">https://github.com/dortania/OpenCore-Legacy-Patcher/releases</a></p>
<p>接下来，运行<code>OpenCore-Patcher.app</code>:</p>
<p><img src="/images/OCLP-GUI-Main-Menu.40fc1dad.png" alt="OCLP-GUI-Main-Menu"></p>
<blockquote>
<p>OpenCore 配置是特定于硬件的。如果您正在为与当前运行的模型不同的模型构建 OpenCore，则绝对有必要从“设置”中选择正确的模型。</p>
</blockquote>
<p>在这里我们将选择 Build and Install OpenCore 并开始构建：</p>
<table>
<thead>
<tr>
<th>开始建造</th>
<th>竣工建筑</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/OCLP-GUI-Build-Start.61964260.png" alt="OCLP-GUI-Build-Start"></td>
<td><img src="/images/OCLP-GUI-Build-Finished.8fc0d8ea.png" alt="OCLP-GUI-Build-Finished"></td>
</tr>
</tbody></table>
<p>构建完成后，您需要选择“安装 OpenCore”按钮：</p>
<blockquote>
<p>如果您手动创建了 macOS USB，但没有看到它列出，请确保它的格式为 GUID/GPT，或者具有供 OpenCore 驻留的 FAT32 分区。</p>
</blockquote>
<table>
<thead>
<tr>
<th>选择驱动器</th>
<th>选择分区</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/OCLP-GUI-EFI-Select-Disk.d9a3392f.png" alt="OCLP-GUI-EFI-Select-Disk"></td>
<td><img src="/images/OCLP-GUI-EFI-Select-Partition.131e5d28.png" alt="OCLP-GUI-EFI-Select-Partition"></td>
</tr>
</tbody></table>
<p>完成后，前往引导 OpenCore 和 macOS</p>
<h2 id="引导-OpenCore-和-macOS"><a href="#引导-OpenCore-和-macOS" class="headerlink" title="引导 OpenCore 和 macOS"></a>引导 OpenCore 和 macOS</h2><h3 id="启动OpenCore"><a href="#启动OpenCore" class="headerlink" title="启动OpenCore"></a>启动OpenCore</h3><p>现在我们终于可以启动 OpenCore 了！</p>
<p>重新启动机器，同时按住<code>Option</code>选择带有 OpenCore 图标的 EFI 启动项（按住该<code>Control</code>键将使该启动项成为默认启动项）：</p>
<blockquote>
<p>这将是 Mac 启动选择器</p>
</blockquote>
<p><img src="/images/efi-boot.8307f610.png" alt="efi-boot"></p>
<h3 id="对于配备未闪存-GPU-的-Mac-Pro-Xserve-iMac-的注意事项"><a href="#对于配备未闪存-GPU-的-Mac-Pro-Xserve-iMac-的注意事项" class="headerlink" title="对于配备未闪存 GPU 的 Mac Pro/Xserve/iMac 的注意事项"></a>对于配备未闪存 GPU 的 Mac Pro/Xserve/iMac 的注意事项</h3><p>改编自<a href="https://forums.macrumors.com/threads/manually-configured-opencore-on-the-mac-pro.2207814/" target="_blank" rel="noopener">Mac Pro 上的 OpenCore 指南</a></p>
<p>对于使用非闪存 GPU 的 Mac Pro、Xserve 和 iMac 用户，您仍然可以轻松启动 OpenCore 并查看整个启动过程。</p>
<p>首先，打开终端并运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nvram "recovery-boot-mode=unused" &amp;&amp; sudo reboot recovery</span><br></pre></td></tr></table></figure>

<p>这将使您的计算机重新启动进入恢复环境。或者，在计算机启动时按住<code>Command</code>+<code>R</code>也可以让您进入恢复。</p>
<p>其次，打开恢复环境的终端（菜单栏 &gt; 实用程序 &gt; 终端）。</p>
<p>现在您需要获取驱动器标识符列表。为此，请运行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure>

<p>该命令应生成系统中安装的驱动器列表：</p>
<p><img src="/images/Unflashed-Boot-1.ba0e58a4.png" alt="Unflashed-Boot-1"></p>
<p>通过 OCLP 安装跟踪驱动器。稍后您将需要驱动器标识符。</p>
<p>现在您需要挂载 EFI 分区（安装 OCLP 的位置，但如果您将 OCLP 安装到 FAT-32 卷，情况可能会有所不同）。</p>
<p>运行以下命令（将 X 替换为驱动器号）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">diskutil mount diskXs1</span><br></pre></td></tr></table></figure>

<p><img src="/images/Unflashed-Boot-2.5e873f39.png" alt="Unflashed-Boot-2"></p>
<p>如果一切正确，则应该安装 EFI 分区。</p>
<p>现在您需要使用以下<code>bless</code>命令来设置默认启动设备：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bless --mount /Volumes/EFI --setBoot --file /Volumes/EFI/System/Library/CoreServices/boot.efi</span><br></pre></td></tr></table></figure>

<p>该命令运行后，不应产生任何输出。</p>
<p><img src="/images/Unflashed-Boot-3.79f71d03.png" alt="Unflashed-Boot-3"></p>
<p>如果该命令产生输出，请确保您输入的内容正确无误。</p>
<p>现在您可以重新启动机器。OCLP 现在是默认启动选项！</p>
<h3 id="安装macOS"><a href="#安装macOS" class="headerlink" title="安装macOS"></a>安装macOS</h3><p>现在您已经加载了 OpenCore，“选择安装 macOS”：</p>
<blockquote>
<p>这将是 OpenCore 选择器</p>
</blockquote>
<p><img src="/images/oc-boot.3c2bdab5.png" alt="oc-boot"></p>
<p>您很快就会到达安装程序屏幕！如果您在构建 OCLP 时启用了详细模式，则会在屏幕上显示大量文本。从那里开始，它就像任何普通的 macOS 安装一样。有关启动过程的示例，请观看以下视频：</p>
<p><a href="https://www.youtube.com/watch?v=AN3zsbQV_n4" target="_blank" rel="noopener">OpenCore 旧版修补程序启动过程</a></p>
<p>如果您的 Mac 在第一次重新启动后循环回到设置的开头，请将其关闭，再次启动并按住Option。这次，选择带有灰色硬盘图标的选项，它可以显示“macOS Installer”或您在安装程序过程中为磁盘指定的名称。如有必要，每次重新启动后请继续重复此步骤。</p>
<p><img src="/images/oclp-stuck-firstreboot.12edd7b4.png" alt="oclp-stuck-firstreboot"></p>
<blockquote>
<p>MacBookPro11,3 注意：启动 macOS Monterey 时，如果尚未安装加速补丁，则需要启动到安全模式。<a href="https://github.com/dortania/OpenCore-Legacy-Patcher/issues/522" target="_blank" rel="noopener">否则，您将因缺少 NVIDIA 驱动程序而出现黑屏</a>。 <code>Shift</code> + <code>Enter</code>在 OCLP 的启动菜单中选择 macOS Monterey 时按住可进入安全模式。</p>
</blockquote>
<p>安装并启动后，前往安装后</p>
<h2 id="安装后"><a href="#安装后" class="headerlink" title="安装后"></a>安装后</h2><h3 id="无需USB驱动器启动"><a href="#无需USB驱动器启动" class="headerlink" title="无需USB驱动器启动"></a>无需USB驱动器启动</h3><p>通过 OpenCore 安装 macOS 后，您可以启动并完成常规安装过程。在不插入 USB 驱动器的情况下启动非常简单：</p>
<ol>
<li>下载 OpenCore 旧版补丁程序</li>
<li>根据需要更改修补程序设置</li>
<li>再次构建 OpenCore</li>
<li>将 OpenCore 安装到内部驱动器</li>
<li>重启按住Option，选择内部EFI</li>
</ol>
<p>瞧！不再需要 USB 驱动器。</p>
<h3 id="无需启动选择器即可无缝启动"><a href="#无需启动选择器即可无缝启动" class="headerlink" title="无需启动选择器即可无缝启动"></a>无需启动选择器即可无缝启动</h3><p>为此，请运行 OpenCore Patcher 并前往 Patcher Settings，然后取消选中 Build 选项卡上的“Show OpenCore Bootpicker”：</p>
<p><img src="/images/OCLP-GUI-Settings-ShowPicker.5831a6a8.png" alt="OCLP-GUI-Settings-ShowPicker"></p>
<p>将其关闭后，再次构建 OpenCore EFI 并安装到所需的驱动器。现在要显示 OpenCore 选择器，您只需在单击 EFI 启动时按住“ESC”键，然后当您看到左上角的光标箭头时即可释放“ESC”键。</p>
<h3 id="启用SIP"><a href="#启用SIP" class="headerlink" title="启用SIP"></a>启用SIP</h3><p>对于许多用户来说，SIP 将在构建时默认降低。对于 Intel HD 4000 用户，您可能已经注意到 SIP 被部分禁用。这是为了确保与 macOS Monterey 完全兼容，并允许它与旧操作系统之间无缝启动。但是，对于不打算启动 Monterey 的用户，您可以在“修补程序设置”下重新启用。</p>
<blockquote>
<p>注意：运行 macOS Ventura 的计算机或具有非 Metal GPU 的系统无法完全启用 SIP，因为根卷已打补丁。启用它会使安装变砖。</p>
</blockquote>
<p>从 0.6.6 开始，可以从图像中显示的“安全”选项卡访问 SIP 设置。</p>
<table>
<thead>
<tr>
<th>启用 SIP</th>
<th>SIP 降低（根修补）</th>
<th>SIP 已禁用</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/OCLP-GUI-Settings-SIP-Enabled.f95aadf0.png" alt="OCLP-GUI-Settings-SIP-Enabled"></td>
<td><img src="/images/OCLP-GUI-Settings-SIP-Root-Patch.b983af09.png" alt="OCLP-GUI-Settings-SIP-Root-Patch"></td>
<td><img src="/images/OCLP-GUI-Settings-SIP-Disabled.960a27d1.png" alt="OCLP-GUI-Settings-SIP-Disabled"></td>
</tr>
</tbody></table>
<blockquote>
<p>如果您不确定是否应该启用 SIP，请保持原样。已运行安装后根修补的系统无法在不破坏当前安装的情况下启用 SIP。</p>
</blockquote>
<h3 id="应用安装后卷补丁"><a href="#应用安装后卷补丁" class="headerlink" title="应用安装后卷补丁"></a>应用安装后卷补丁</h3><p>安装后卷补丁（有时也称为根补丁）是一些旧 Mac 必须安装到磁盘才能恢复功能的补丁。</p>
<p>如果 USB 安装介质是在 OCLP 中创建的，则OCLP 将在首次安装期间自动对系统进行根修补。macOS 更新后或系统上未检测到补丁时，系统还会提示用户安装这些补丁。我们建议使用最新版本的 OCLP 重建 OpenCore 以利用这些新功能。</p>
<p>用户还可以在安装后菜单中查看是否已安装适用的补丁、对系统进行根修补的日期和版本。</p>
<table>
<thead>
<tr>
<th>自动安装提示</th>
<th>地位</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/OCLP-GUI-root-patch-update.2ede4894.png" alt="OCLP-GUI-root-patch-update"></td>
<td><img src="/images/OCLP-GUI-Root-Patch-Status.88367958.png" alt="OCLP-GUI-Root-Patch-Status"></td>
</tr>
</tbody></table>
<h3 id="手动运行安装后补丁"><a href="#手动运行安装后补丁" class="headerlink" title="手动运行安装后补丁"></a>手动运行安装后补丁</h3><p>如果您使用的是 OCLP v0.4.3 或更早版本，或者需要手动运行修补程序，则可以使用该应用程序执行此操作。尝试运行补丁程序并没有什么坏处，因为如果没有兼容的硬件，什么也做不了。您可以在下面查看您的硬件是否需要根卷修补。</p>
<table>
<thead>
<tr>
<th>列出补丁</th>
<th>修补完毕</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/images/OCLP-GUI-Root-Patch.8759192a.png" alt="OCLP-GUI-Root-Patch"></td>
<td><img src="/images/OCLP-GUI-Root-Patch-Finished.ce27b410.png" alt="OCLP-GUI-Root-Patch-Finished"></td>
</tr>
</tbody></table>
<p>对于 macOS Ventura 和配备 AMD Legacy GCN GPU（即 Metal）的 Mac，根修补需要网络连接来获取 Apple 的内核调试套件以开始根修补。如果您的系统无法连接到互联网，您可以从 Apple 网站手动下载 KDK：<a href="https://developer.apple.com/download/all/?q=Kernel%20Debug%20Kit" target="_blank" rel="noopener">Apple 的开发者下载页面</a></p>
<p>获取与您安装的操作系统版本最接近的内核调试工具包，并将其安装到运行 Ventura 的计算机上。</p>
<p>需要此功能的机器是配备 AMD Metal dGPU 的机器：</p>
<p>2008 - 2013 Mac Pro (MacPro3,1 - 6,1)</p>
<p>2009 - 2016 iMac（iMac10,1 - 17,1）</p>
<p>2015 款 15 英寸 MacBook Pro，配备 dGPU (MacBookPro11,5)</p>
<p>以下条目代表不再原生支持的 GPU，即。需要使用 OpenCore Legacy Patcher 修补根卷：</p>
<p>macOS Big Sur 中需要修补的 GPU</p>
<ul>
<li>英伟达：<ul>
<li>特斯拉（8000 - 300 系列）</li>
</ul>
</li>
<li>超微半导体：<ul>
<li>TeraScale（2000 - 6000 系列）</li>
</ul>
</li>
<li>英特尔：<ul>
<li>铁湖</li>
<li>桑迪桥（2000 - 3000 系列）</li>
</ul>
</li>
</ul>
<p>macOS Monterey 中需要修补的 GPU</p>
<ul>
<li>英伟达：<ul>
<li>特斯拉（8000 - 300 系列）</li>
<li>开普勒（600 - 800 系列）</li>
</ul>
</li>
<li>超微半导体：<ul>
<li>TeraScale（2000 - 6000 系列）</li>
</ul>
</li>
<li>英特尔：<ul>
<li>铁湖</li>
<li>桑迪桥（2000 - 3000 系列）</li>
<li>Ivy Bridge（4000 系列）</li>
</ul>
</li>
</ul>
<p>macOS Monterey 中需要修补的无线卡</p>
<ul>
<li>博通：<ul>
<li>BCM94328</li>
<li>BCM94322</li>
</ul>
</li>
<li>阿瑟罗斯</li>
</ul>
<p>macOS Ventura 中需要修补的 GPU</p>
<ul>
<li>英伟达：<ul>
<li>开普勒（600 - 800 系列）</li>
</ul>
</li>
<li>超微半导体：<ul>
<li>GCN 1-3（7000 - R9 系列）</li>
<li>Polaris（RX 4xx/5xx 系列，如果 CPU 缺少 AVX2）</li>
</ul>
</li>
<li>英特尔：<ul>
<li>Ivy Bridge（4000 系列）</li>
<li>Haswell（4400、4600、5000 系列）</li>
<li>布罗德韦尔（6000 系列）</li>
<li>Skylake（500 系列）</li>
</ul>
</li>
</ul>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>参考链接：<a href="https://dortania.github.io/OpenCore-Legacy-Patcher/INSTALLER.html#creating-the-installer" target="_blank" rel="noopener">https://dortania.github.io/OpenCore-Legacy-Patcher/INSTALLER.html#creating-the-installer</a></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>MNIST机器学习入门</title>
    <url>/MNIST%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<blockquote>
<p> 跟着官方网站的教程，和自己的一些爬坑过程，简单的在这里做一下记录，希望对大家有所帮助。虽然有些部分是一致，但是当中有一些问题还是有参考价值的。（环境搭建本文暂不讨论）</p>
</blockquote>
<p>本文相关链接：</p>
<blockquote>
<p><a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_beginners.html" target="_blank" rel="noopener">MNIST机器学习入门官方网站</a></p>
<p><a href="http://www.jianshu.com/p/4195577585e6" target="_blank" rel="noopener">简书网友参考链接</a></p>
</blockquote>
<p>官网例子运行截图如下（for Pycharm）</p>
<p><img src="http://img.blog.csdn.net/20170901153542525?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbm9ibXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="tensorflow demo"></p>
<h3 id="一、MNIST简介"><a href="#一、MNIST简介" class="headerlink" title="一、MNIST简介"></a>一、MNIST简介</h3><blockquote>
<p><a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">官网链接</a></p>
</blockquote>
<p>这个MNIST数据库是一个手写数字的数据库，它提供了六万的训练集和一万的测试集。</p>
<p>它的图片是被规范处理过的，是一张被放在中间部位的28px*28px的灰度图。</p>
<p>总共4个文件:</p>
<p><code>train-images-idx3-ubyte</code>: training set images<br><code>train-labels-idx1-ubyte</code>: training set labels<br><code>t10k-images-idx3-ubyte</code>:  test set images<br><code>t10k-labels-idx1-ubyte</code>:  test set labels</p>
<p>图片都被转成二进制放到了文件里面，</p>
<p>所以，每一个文件头部几个字节都记录着这些图片的信息，然后才是储存的图片信息。</p>
<h3 id="二、tensorflow手写数字识别步骤"><a href="#二、tensorflow手写数字识别步骤" class="headerlink" title="二、tensorflow手写数字识别步骤"></a>二、tensorflow手写数字识别步骤</h3><ol>
<li>将要识别的图片转为灰度图，并且转化为28*28矩阵</li>
<li>将28*28的矩阵转换成1维矩阵</li>
<li>用一个1*10的向量代表标签，因为数字是0～9，如数字1对应的矩阵就是：[0,1,0,0,0,0,0,0,0,0]</li>
<li>softmax回归预测图片是哪个数字的概率。</li>
</ol>
<p>这里顺带说一下还有一个回归：logistic，因为这里我们表示的状态不只两种，因此需要使用softmax。</p>
<h3 id="三、标签介绍（有监督学习／无监督学习）"><a href="#三、标签介绍（有监督学习／无监督学习）" class="headerlink" title="三、标签介绍（有监督学习／无监督学习）"></a>三、标签介绍（有监督学习／无监督学习）</h3><blockquote>
<p> 监督学习：利用一组已知类别的样本调整分类器的参数，使其达到所要求性能的过程，也称为监督训练或有教师学习举个例子，MNIST自带了训练图片和训练标签，每张图片都有一个对应的标签，比如这张图片是1，标签也就是1,用他们训练程序，之后程序也就能识别测试集中的图片了，比如给定一张2的图片，它能预测出他是2</p>
<p>无监督学习：其中很重要的一类叫聚类举个例子，如果MNIST中只有训练图片，没有标签，我们的程序能够根据图片的不同特征，将他们分类，但是并不知道他们具体是几，这个其实就是“聚类”</p>
</blockquote>
<h4 id="标签的表示"><a href="#标签的表示" class="headerlink" title="标签的表示"></a>标签的表示</h4><p>在这里标签的表示方式有些特殊，它也是使用了一个一维数组，而不是单纯的数字，上面也说了，他是一个一位数组，0表示方法[1,0,0,0,0,0,0,0,0,0],1表示[0,1,0,0,0,0,0,0,0,0],………，</p>
<p>主要原因其实是这样的，因为softmax回归处理后会生成一个1*10的数组，数组[0,0]的数字表示预测的这张图片是0的概率，[0,1]则表示这张图片表示是1的概率……以此类推，这个数组表示的就是这张图片是哪个数字的概率（已经归一化），</p>
<p>因此，实际上，概率最大的那个数字就是我们所预测的值。两者对应来看，标准的标签就是表示图片对应数字的概率为100%，而表示其它数字的概率为0，举个例子，0表示[1,0,0,0,0,0,0,0,0,0]，可以理解为它表示0的概率为100%，而表示别的数字的概率为0.</p>
<p>####softmax回归</p>
<p>这是一个分类器，可以认为是Logistic回归的扩展，Logistic大家应该都听说过，就是生物学上的S型曲线，它只能分两类，用0和1表示，这个用来表示答题对错之类只有两种状态的问题时足够了，但是像这里的MNIST要把它分成10类，就必须用softmax来进行分类了。</p>
<p>P(y=0)=p0,P(y=1)=p1,p(y=2)=p2……P(y=9)=p9.这些表示预测为数字i的概率，（跟上面标签的格式正好对应起来了）,它们的和为1，即 ∑(pi)=1。</p>
<p>tensorflow实现了这个函数，我们直接调用这个softmax函数即可，对于原理，可以参考下面的引文，这里只说一下我们这个MNIST demo要用softmax做什么。</p>
<p>（注：每一个神经元都可以接收来自网络中其他神经元的一个或多个输入信号，神经元与神经元之间都对应着连接权值，所有的输入加权和决定该神经元是处于激活还是抑制状态。感知器网络的输出只能取值0或1，不具备可导性。而基于敏感度的训练算法要求其输出函数必须处处可导，于是引入了常见的S型可导函数，即在每个神经元的输出之前先经过S型激活函数的处理。）</p>
<p>####交叉熵</p>
<p>通俗一点就是，方差大家都知道吧，用它可以衡量预测值和实际值的相差程度，交叉熵其实也是一样的作用，那为什么不用方差呢，因为看sigmoid函数的图像就会发现，它的两侧几乎就是平的，导致它的方差在大部分情况下很小，这样在训练参数的时候收敛地就会很慢，交叉熵就是用来解决这个问题的，它的公式是 $-\sum y’log(y)$ ，其中，y是我们预测的概率分布,y’是实际的分布。</p>
<p>###梯度下降</p>
<p>上面那步也说了，有个交叉熵，根据大伙对方差的理解，值越小，自然就越好，因此我们也要训练使得交叉熵最小的参数，这里梯度下降法就派上用场了，这个解释见上一篇系列文章吧，什么叫训练参数呢，可以想象一下，我们先用实际的值在二位坐标上画一条线，然后我们希望我们预测出来的那些值要尽可能地贴近这条线，我们假设生成我们这条线的公式ax+ax^2+bx^3+…..，我们需要生成这些系数，要求得这些系数，我们就需要各种点代入，然后才能求出，所以其实训练参数跟求参数是个类似的过程。</p>
<p>###预测</p>
<p>训练结束以后我们就可以用这个模型去预测新的图片了，大概意思就是输入对应的值就能获取相应的结果。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> six.moves <span class="keyword">import</span> xrange  <span class="comment"># pylint: disable=redefined-builtin</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib.learn.python.learn.datasets.mnist <span class="keyword">import</span> read_data_sets</span><br><span class="line"><span class="keyword">import</span> tensorflow.examples.tutorials.mnist.input_data</span><br><span class="line"><span class="string">"""MNIST机器学习"""</span></span><br><span class="line"><span class="string">"""下载并读取数据源"""</span></span><br><span class="line">mnist = read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"><span class="string">"""x是784维占位符，基础图像28x28=784"""</span></span><br><span class="line">x = tf.placeholder(tf.float32,[<span class="literal">None</span>,<span class="number">784</span>])</span><br><span class="line"><span class="string">"""W表示证据值向量，因为总数据量为0～9，每一维对应不同的数字，因此为10"""</span></span><br><span class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>,<span class="number">10</span>]))</span><br><span class="line"><span class="string">"""b同理，为10"""</span></span><br><span class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</span><br><span class="line">y = tf.nn.softmax(tf.matmul(x,W)+b)</span><br><span class="line"><span class="string">"""初始化交叉熵的值"""</span></span><br><span class="line">y_ = tf.placeholder(<span class="string">"float"</span>,[<span class="literal">None</span>,<span class="number">10</span>])</span><br><span class="line"><span class="string">"""计算交叉熵"""</span></span><br><span class="line">cross_entropy = -tf.reduce_sum(y_*tf.log(y))</span><br><span class="line"><span class="string">"""梯度下降算法"""</span></span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(cross_entropy)</span><br><span class="line"><span class="string">"""开始训练模型"""</span></span><br><span class="line">init = tf.initialize_all_variables()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    batch_xs,batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    sess.run(train_step,feed_dict=&#123;x:batch_xs,y_:batch_ys&#125;)</span><br><span class="line"><span class="string">"""评估模型"""</span></span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))</span><br><span class="line"><span class="string">"""正确率"""</span></span><br><span class="line">k = sess.run(accuracy, feed_dict=&#123;x: mnist.test.images, y_: mnist.test.labels&#125;)</span><br><span class="line">print(k)</span><br></pre></td></tr></table></figure>

<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>公式参考链接：<a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference</a></p>
]]></content>
      <categories>
        <category>machine learning</category>
      </categories>
      <tags>
        <tag>mnist</tag>
        <tag>machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq for Docker安装教程</title>
    <url>/Rabbitmq-for-Docker%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>为了配合Spring-Cloud-Bus做配置文件的更新，需要用到Rabbitmq，在实际生产环境中安装Rabbitmq出现了一些问题（如Linux内核版本、erlang版本等其他问题），因此使用Docker进行部署。</p>
<p>运行查找命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search rabbitmq</span><br></pre></td></tr></table></figure>

<p>找到第一个：NAME is rabbitmq</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq</span><br></pre></td></tr></table></figure>

<p>运行一个rabbitmq容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:latest</span><br></pre></td></tr></table></figure>

<p>5672: 服务端口号</p>
<p>15672: web管理端口号</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后，可以把运行容器的部分保存成一个rabbitmq-start.sh的文件，方便快速启动。</p>
<h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><ul>
<li>docker ps : 查看已经运行的容器</li>
<li>docker ps -a: 查看停止的容器</li>
<li>docker stop &lt;container_name/container_id&gt;: 停止容器</li>
<li>docker rm &lt;container_name/container_id&gt;: 删除容器</li>
<li>Docker rmi &lt;image_name/image_id&gt;: 删除镜像</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenJDK9在OSX平台下编译和调试</title>
    <url>/OpenJDK9%E5%9C%A8OSX%E5%B9%B3%E5%8F%B0%E4%B8%8B%E7%BC%96%E8%AF%91%E5%92%8C%E8%B0%83%E8%AF%95.html</url>
    <content><![CDATA[<p>在<code>深入理解Java虚拟机</code>一书中编译OpenJDK出现各种奇怪的错误，在这里集中做一下说明，以便日后查看。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="安装hg"><a href="#安装hg" class="headerlink" title="安装hg"></a>安装hg</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install hg</span><br></pre></td></tr></table></figure>

<h3 id="下载OpenJDK源码"><a href="#下载OpenJDK源码" class="headerlink" title="下载OpenJDK源码"></a>下载OpenJDK源码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hg <span class="built_in">clone</span> http://hg.openjdk.java.net/jdk9/dev</span><br></pre></td></tr></table></figure>

<h3 id="安装freetype"><a href="#安装freetype" class="headerlink" title="安装freetype"></a>安装freetype</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install freetype</span><br></pre></td></tr></table></figure>

<h3 id="安装libffi（可选）"><a href="#安装libffi（可选）" class="headerlink" title="安装libffi（可选）"></a>安装libffi（可选）</h3><p>如果需要使用zero解释器，需要安装libffi</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install libffi</span><br></pre></td></tr></table></figure>

<h3 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash configure --with-debug-level=slowdebug \</span><br><span class="line">--with-freetype=/usr/<span class="built_in">local</span>/opt/freetype \</span><br><span class="line">--<span class="built_in">disable</span>-warnings-as-errors \</span><br><span class="line">--with-jvm-features=zero \</span><br><span class="line">--with-jvm-variants=zero \</span><br><span class="line">--with-libffi=/usr/<span class="built_in">local</span>/opt/libffi \</span><br><span class="line">--with-libffi-include=/usr/<span class="built_in">local</span>/Cellar/libffi/3.0.13/lib/libffi-3.0.13/include</span><br></pre></td></tr></table></figure>

<h4 id="–with-debug-level"><a href="#–with-debug-level" class="headerlink" title="–with-debug-level"></a>–with-debug-level</h4><p>设置调试级别，设成 slow debug 可以提供更多的调试信息</p>
<h4 id="–with-free-type"><a href="#–with-free-type" class="headerlink" title="–with-free-type"></a>–with-free-type</h4><p>设置 free type 路径</p>
<h4 id="–disable-warnings-as-errors"><a href="#–disable-warnings-as-errors" class="headerlink" title="–disable-warnings-as-errors"></a>–disable-warnings-as-errors</h4><p>忽略警告</p>
<h4 id="–with-jvm-features"><a href="#–with-jvm-features" class="headerlink" title="–with-jvm-features"></a>–with-jvm-features</h4><p>设置使用 c++ 实现的 zero 解释器，比基于模版的解释器更容易调试（如果汇编功力不够的话）</p>
<h4 id="–with-jvm-variants"><a href="#–with-jvm-variants" class="headerlink" title="–with-jvm-variants"></a>–with-jvm-variants</h4><p>配合 –with-jvm-features 使用</p>
<h4 id="–with-libffi"><a href="#–with-libffi" class="headerlink" title="–with-libffi"></a>–with-libffi</h4><p>配合 –with-jvm-features 使用</p>
<h4 id="–with-libffi-include"><a href="#–with-libffi-include" class="headerlink" title="–with-libffi-include"></a>–with-libffi-include</h4><p>设置 libffi include 文件夹路径</p>
<h3 id="make"><a href="#make" class="headerlink" title="make"></a>make</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p>在实际编译过程中出现了错误信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error: ordered comparison between pointer and zero (<span class="string">'char *'</span> and <span class="string">'int'</span>)</span><br></pre></td></tr></table></figure>

<p>将代码<code>&gt; 0</code>或者<code>&gt;=0</code>部分改为<code>!= NULL</code>继续编译即可通过。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>编译成功后，测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/build/***/jdk/bin/java -version</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH建立SOCKS代理</title>
    <url>/SSH%E5%BB%BA%E7%AB%8BSOCKS%E4%BB%A3%E7%90%86.html</url>
    <content><![CDATA[<p>因工作环境与服务器不在同一局域网下，为了安全性，不公开内部端口，因此需要进行外网对局域网的服务进行访问，我的ssh账号拥有shell权限，可以建立SSH Tunnel。</p>
<h2 id="以下是代理SSH的步骤："><a href="#以下是代理SSH的步骤：" class="headerlink" title="以下是代理SSH的步骤："></a>以下是代理SSH的步骤：</h2><h3 id="打开Terminal"><a href="#打开Terminal" class="headerlink" title="打开Terminal"></a>打开Terminal</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -D 7070 <span class="built_in">test</span>@test.com</span><br></pre></td></tr></table></figure>

<p>-D 7070 表示在本地开通一个SOCKS代理，监听的端口号是7070<br><a href="mailto:test@test.com" target="_blank" rel="noopener">test@test.com</a> 表示远程服务器用户名@域名或IP</p>
<h3 id="维持ssh连接"><a href="#维持ssh连接" class="headerlink" title="维持ssh连接"></a>维持ssh连接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<p>或者修改本地配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi ~/.ssh/_config</span><br></pre></td></tr></table></figure>

<p>添加两行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ServerAliveInterval 120</span><br><span class="line">TCPKeepAlive no</span><br></pre></td></tr></table></figure>

<p>注意，这个Terminal不能关闭，否则ssh tunnel会关闭。</p>
<h3 id="修改本地网络代理"><a href="#修改本地网络代理" class="headerlink" title="修改本地网络代理"></a>修改本地网络代理</h3><p>System Preferences -&gt; Network 中选择当前连接，点击Advanced。</p>
<p>切换到Proxies，选择SOCKS Proxy Server，host填写localhost，端口号改为7070，并勾选SOCKS Proxy的CheckBox即可。</p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>这里直接开启的是全局代理，经测试在代码中进行GET/POST请求也能得到结果了，不需要在代码中进行代理，不过需要注意的是，当你使用localhost和127.0.0.1的时候是不会访问服务器上的内容的，需要使用服务器的局域网IP来进行访问。</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>SOCKS</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Feign和Hystric进行负载和熔断</title>
    <url>/Spring-Cloud-Feign%E5%92%8CHystric%E8%BF%9B%E8%A1%8C%E8%B4%9F%E8%BD%BD%E5%92%8C%E7%86%94%E6%96%AD.html</url>
    <content><![CDATA[<blockquote>
<p>在Spring Cloud Netflix栈中，各个微服务都是以HTTP接口的形式暴露自身服务的，因此在调用远程服务时就必须使用HTTP客户端。我们可以使用JDK原生的<code>URLConnection</code>、Apache的<code>Http Client</code>、Netty的异步HTTP Client, Spring的<code>RestTemplate</code>。但是，用起来最方便、最优雅的还是要属Feign了。</p>
</blockquote>
<h2 id="Feign简介"><a href="#Feign简介" class="headerlink" title="Feign简介"></a>Feign简介</h2><p>Feign是一种声明式、模板化的HTTP客户端。在Spring Cloud中使用Feign, 我们可以做到使用HTTP请求远程服务时能与调用本地方法一样的编码体验，开发者完全感知不到这是远程方法，更感知不到这是个HTTP请求。</p>
<p>下面实现了Feign的熔断处理，先是<code>pom.xml</code>文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fiveplus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>user-feign<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>User project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 部署热更新 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	    		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	    		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    					<span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">  				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来是<code>application.properties</code>项目配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">server.port=7000</span><br><span class="line"></span><br><span class="line">eureka.client.service-url.default-zone=http://localhost:8761/eureka/</span><br><span class="line"></span><br><span class="line">spring.application.name=user-feign</span><br><span class="line"></span><br><span class="line"># open hystrix</span><br><span class="line"></span><br><span class="line">feign.hystrix.enabled=true</span><br></pre></td></tr></table></figure>

<ul>
<li><code>eureka.client.service-url.default-zone</code> 服务注册中心，上面的写法针对没有做安全模块的服务配置中心<code>Eureka-Server</code>，如果你的<code>Eureka-Server</code>实现了安全模块，写法为：<code>http://username:password@ip:host/eureka/</code></li>
</ul>
<h3 id="Feign接口层"><a href="#Feign接口层" class="headerlink" title="Feign接口层"></a>Feign接口层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fiveplus.feign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.feign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fiveplus.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(value=<span class="string">"user-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SchedualServiceUser</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"/user/get.json"</span>,method = RequestMethod.GET)</span><br><span class="line">	<span class="function">String <span class="title">get</span><span class="params">(@RequestParam(<span class="string">"loginName"</span>)</span> String loginName,@<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@FeignClient</code> 对应微服务的<code>application-name</code></li>
<li>接口声明需要与服务提供者保持一致</li>
</ul>
<h3 id="Hystric熔断层"><a href="#Hystric熔断层" class="headerlink" title="Hystric熔断层"></a>Hystric熔断层</h3><blockquote>
<p>继承Feign接口层，实现方法，当Eureka注册中心中不存在目标服务对应的请求，那么会进行熔断处理，返回该实现方法的值。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fiveplus.hystric;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> com.fiveplus.feign.SchedualServiceUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedualServiceUserHystric</span> <span class="keyword">implements</span> <span class="title">SchedualServiceUser</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String msg = <span class="string">"error"</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String loginName, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> msg;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RestController对外开放"><a href="#RestController对外开放" class="headerlink" title="RestController对外开放"></a>RestController对外开放</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fiveplus.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fiveplus.feign.SchedualServiceUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> SchedualServiceUser schedualServiceUser;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@RequestMapping</span>(value = <span class="string">"/user/get.json"</span>,method = RequestMethod.GET)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(@RequestParam(<span class="string">"loginName"</span>)</span> String loginName,@<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> schedualServiceUser.get(loginName, password);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启动类Application-java"><a href="#启动类Application-java" class="headerlink" title="启动类Application.java"></a>启动类<code>Application.java</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fiveplus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.feign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.EnableHystrix;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@LoadBalanced</span></span><br><span class="line">	<span class="function">RestTemplate <span class="title">restTemple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>在实际使用过程中，也许不需要对外提供服务，依据详细情况具体制定。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Feign</tag>
        <tag>Hystric</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Config Server搭建教程</title>
    <url>/Spring-Config-Server%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。在spring cloud config 组件中，分两个角色，一是config server，二是config client。</p>
<h3 id="构建Config-Server"><a href="#构建Config-Server" class="headerlink" title="构建Config Server"></a>构建Config Server</h3><p>创建一个Spring Boot项目，pom.xml文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fiveplus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>config-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>User project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Dalston.SR4<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>spring-boot<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">				&lt;configuration&gt;</span></span><br><span class="line"><span class="comment">					&lt;executable&gt;true&lt;/executable&gt;</span></span><br><span class="line"><span class="comment">				&lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">				 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- tag:plugin[] --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- end::plugin[] --&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.properties配置文件如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">config-server</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br><span class="line"></span><br><span class="line"><span class="meta">management.security.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.config.server.git.uri</span>=<span class="string">&lt;you_git_uri&gt;/</span></span><br><span class="line"><span class="meta">spring.cloud.config.server.git.search-paths</span>=<span class="string">&lt;floder&gt;</span></span><br><span class="line"><span class="meta">spring.cloud.config.label</span>=<span class="string">master</span></span><br><span class="line"><span class="meta">spring.cloud.config.server.git.username</span>=<span class="string">&lt;your_username&gt;</span></span><br><span class="line"><span class="meta">spring.cloud.config.server.git.password</span>=<span class="string">&lt;your_password&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后是Application.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fiveplus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来在你的git仓库下新建一个文件夹，这个文件夹名与application.properties文件中的spring.cloud.config.server.git.search-paths一致。</p>
<p>http请求地址与资源文件映射：</p>
<ul>
<li>/{application}/{profile}[/{label}]</li>
<li>/{application}-{profile}.yml</li>
<li>/{label}/{application}-{profile}.yml</li>
<li>/{application}-{profile}.properties</li>
<li>/{label}/{application}-{profile}.properties</li>
</ul>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>可以使用Docker的方式构建该项目。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringFramework BeanUtil</title>
    <url>/SpringFramework-BeanUtil.html</url>
    <content><![CDATA[<p>在使用SpringMVC开发JavaWeb网站的时候，当执行Update方法的时候，需要对修改实体类的字段进行<code>set</code>操作，字段过多的时候一个个的<code>set</code>实在是一件麻烦事，于是想到了SpringFramework自带的BeanUtils方法，但是这个方法会将结果为<code>Null</code>的字段也进行拷贝，与实际Update功能不符，因此需要进行改写。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>改写SpringFramework BeanUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cloud.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanWrapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanWrapperImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanUtil</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">BeanUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 重写工具类BeanUtils，如果为NULL则不复制属性值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> source newClass</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> target oldClass</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyProperties</span><span class="params">(Object source,Object target)</span></span>&#123;</span><br><span class="line">		BeanUtils.copyProperties(source, target,getNullPropertyNames(source));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String[] getNullPropertyNames(Object source)&#123;</span><br><span class="line">		<span class="keyword">final</span> BeanWrapper src = <span class="keyword">new</span> BeanWrapperImpl(source);</span><br><span class="line">		java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();</span><br><span class="line">		Set&lt;String&gt; emptyNames = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">		<span class="keyword">for</span>(java.beans.PropertyDescriptor pd:pds)&#123;</span><br><span class="line">			Object srcValue = src.getPropertyValue(pd.getName());</span><br><span class="line">			<span class="keyword">if</span>(srcValue == <span class="keyword">null</span>) emptyNames.add(pd.getName());</span><br><span class="line">		&#125;</span><br><span class="line">		String[] result = <span class="keyword">new</span> String[emptyNames.size()];</span><br><span class="line">		<span class="keyword">return</span> emptyNames.toArray(result);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>在实际使用过程中可以进行拓展，比如对<code>int</code>类型进行操作。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Tesseract-OCR识别中文与训练字库实例</title>
    <url>/Tesseract-OCR%E8%AF%86%E5%88%AB%E4%B8%AD%E6%96%87%E4%B8%8E%E8%AE%AD%E7%BB%83%E5%AD%97%E5%BA%93%E5%AE%9E%E4%BE%8B.html</url>
    <content><![CDATA[<p>关于中文识别，效果不错并且开源的应该就是Tesseract-OCR了，在Mac下试用了一下，参考了网络上其他人的一些资源，在这里分享一下。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>下载Tesseract-OCR引擎，到github下查看安装过程，<a href="https://github.com/tesseract-ocr/tesseract/wiki" target="_blank" rel="noopener">Tesseract-OCR WebSize</a></li>
<li>下载chi_sim.traindata字库，没有这个默认不能识别中文。</li>
<li>下载JTessBoxEditor，用来训练字库。</li>
</ol>
<h3 id="开始识别"><a href="#开始识别" class="headerlink" title="开始识别"></a>开始识别</h3><p>进入要识别的目录下，键入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tesseract &lt;picture_file&gt; &lt;output_file_name&gt; -l chi_sim</span><br></pre></td></tr></table></figure>

<p>如果源图是电脑上的生成的，如HTML / PS等在这里效果会不错，但是如果你的源图是拍摄所得，那么效果就不太理想了，因此在这里自己训练字库文件。</p>
<h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><ol>
<li><p>将原图转换成tif格式的图片文件，用于后面生成box文件。</p>
<p>tif文件的命名格式 <lang>.<fontname>.exp<num>.tif</num></fontname></lang></p>
<p>eg: fiveplus.normal.exp0.tif</p>
<ul>
<li>lang: 语言</li>
<li>fontname: 字体（normal即可）</li>
<li>num: 下标</li>
</ul>
</li>
<li><p>生成box文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tesseract fiveplus.normal.exp0.jpg fiveplus.normal.exp0 -l chi_sim batch.nochop makebox</span><br></pre></td></tr></table></figure>

<p>box文件与tif需要在相同目录下。</p>
</li>
<li><p>打开JTessBoxEditor纠正错误，并训练</p>
<p>打开tif文件，开始矫正数据，包括x, y, width, height, char</p>
</li>
<li><p>开始训练</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tesseract fiveplus.normal.exp0.jpg fiveplus.normal.exp0 nobatch box.train unicharset_extractor fiveplus.normal.exp0.box</span><br></pre></td></tr></table></figure>

<p>新建一个font_properties文件，写入 normal 0 0 0 0 0 表示默认字体。</p>
<p>继续运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shapeclustering -F font_properties -U unicharset fiveplus.normal.exp0.tr</span><br><span class="line"></span><br><span class="line">mftraining -F font_properties -U unicharset -O unicharset fiveplus.normal.exp0.tr</span><br><span class="line"></span><br><span class="line">cntraining fiveplus.normal.exp0.tr</span><br></pre></td></tr></table></figure>

<p>然后我们合并生成的5个文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">combine_tessdata normal.</span><br></pre></td></tr></table></figure>

<p>得到文件：normal.traineddata</p>
</li>
<li><p>开始测试结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tesseract &lt;picture_file&gt; &lt;output_file&gt; -l normal</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>自己训练过后的字库识别效果会好很多，之后就是怎么把多个字库合并成一个字库了，因为不可能一次训练完所有的图片文字的，字库文件是一个叠加过程，在线上环境中我们只需要不停的更新这个字库文件就好了。</p>
]]></content>
      <categories>
        <category>ocr</category>
      </categories>
      <tags>
        <tag>ocr</tag>
      </tags>
  </entry>
  <entry>
    <title>frp-NAS内网穿透实现</title>
    <url>/frp-NAS%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E7%8E%B0.html</url>
    <content><![CDATA[<p>群晖在使用的过程中，因为没有公网IP的关系，因而需要用到内网穿透技术。使用nat123或者花生壳虽然能达到效果，奈何速度太慢，收到端口闲置颇多，因而使用frp实现内网穿透。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>一台阿里云服务器或者VPS （服务端）</li>
<li>NAS（客户端）</li>
<li>FRP服务端以及客户端：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">FRP官网</a></li>
</ul>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>服务器端配置文件<code>frps.ini</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="string">7000</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="string">8080</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="string">7500</span></span><br><span class="line"><span class="attr">dashboard_user</span> = <span class="string">用户名</span></span><br><span class="line"><span class="attr">dashboard_pwd</span> = <span class="string">密码</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="string">5</span></span><br><span class="line"><span class="attr">authentication_timeout</span> = <span class="string">900</span></span><br><span class="line"></span><br><span class="line"><span class="attr">subdomain_host</span> = <span class="string">your_domain.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[ssh]</span></span><br><span class="line"><span class="attr">listen_port</span> = <span class="string">6000</span></span><br><span class="line"><span class="attr">auth_token</span> = <span class="string">和客服端 token 对应</span></span><br></pre></td></tr></table></figure>

<p>启动服务端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>

<p>客户端配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="string">ip</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="string">7000</span></span><br><span class="line"><span class="attr">auth_token</span> = <span class="string">和服务器端对应</span></span><br><span class="line"><span class="attr">pool_count</span> = <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">tcp</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="string">NAS局域网ip / 127.0.0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="string">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="string">6000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[nas]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">http</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="string">5000</span></span><br><span class="line"><span class="attr">subdomain</span> = <span class="string">nas</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[web]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">http</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="string">80</span></span><br><span class="line"><span class="attr">subdomain</span> = <span class="string">web</span></span><br></pre></td></tr></table></figure>

<p>运行客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>

<h3 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h3><p>最后，将域名与服务器端的IP进行绑定操作即可。</p>
]]></content>
      <categories>
        <category>nas</category>
      </categories>
      <tags>
        <tag>nas</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS下JD-GUI无法打开的问题</title>
    <url>/macOS%E4%B8%8BJD-GUI%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E7%9A%84%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<blockquote>
<p>在官网下载了最新版本的额JD-GUI，打开出现如下错误</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR launching ‘JD-GUI’</span><br><span class="line">No suitable Java version found on your system!</span><br><span class="line">This program requires Java 1.8+</span><br><span class="line">Make sure you install the required Java version.</span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>进入Contents文件下编辑<code>Info.plist</code>文件，搜索<code>1.8+</code>，然后将<code>+</code>删除掉，保存即可</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/546643868?utm_id=0" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/546643868?utm_id=0</a></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOSOpenDev安装</title>
    <url>/iOSOpenDev%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="安装-macports"><a href="#安装-macports" class="headerlink" title="安装 macports"></a>安装 <a href="https://link.jianshu.com/?t=https://www.macports.org/install.php" target="_blank" rel="noopener">macports</a></h3><p>安装完MacPorts后打开终端，输入 sudo port -v selfupdate 更新MacPorts到最新版本，时间可能比较长。</p>
<h3 id="安装DPKG文件"><a href="#安装DPKG文件" class="headerlink" title="安装DPKG文件"></a>安装DPKG文件</h3><p>更新完MacPorts后安装DPKG文件，在终端输入sudo port -f install dpkg</p>
<h3 id="安装iosopendev"><a href="#安装iosopendev" class="headerlink" title="安装iosopendev"></a>安装iosopendev</h3><p>下载安装 <a href="https://link.jianshu.com/?t=http://iosopendev.com/download/" target="_blank" rel="noopener">iosopendev</a> 如果安装失败，可以通过 Command + L 查看安装中出现的问题。如果提示以下问题请先下载 <a href="https://link.jianshu.com/?t=https://github.com/LengYi/iosOpenDev" target="_blank" rel="noopener">附件</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PackageKit: Install Failed: Error Domain=PKInstallErrorDomain Code=112 "运行软件包“iOSOpenDev-1.6-2.pkg”的脚本时出错。" UserInfo=&#123;NSFilePath=./postinstall, NSURL=file://localhost/Users/ice/Downloads/iOSOpenDev-1.6-2.pkg#iodsetup.pkg, PKInstallPackageIdentifier=com.iosopendev.iosopendev162.iod-setup.pkg, NSLocalizedDescription=运行软件包“iOSOpenDev-1.6-2.pkg”的脚本时出错。&#125; &#123;</span><br><span class="line">        NSFilePath = "./postinstall";</span><br><span class="line">        NSLocalizedDescription = "\U8fd0\U884c\U8f6f\U4ef6\U5305\U201ciOSOpenDev-1.6-2.pkg\U201d\U7684\U811a\U672c\U65f6\U51fa\U9519\U3002";</span><br><span class="line">        NSURL = "file://localhost/Users/ice/Downloads/iOSOpenDev-1.6-2.pkg#iodsetup.pkg";</span><br><span class="line">        PKInstallPackageIdentifier = "com.iosopendev.iosopendev162.iod-setup.pkg";</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="修复安装失败问题"><a href="#修复安装失败问题" class="headerlink" title="修复安装失败问题"></a>修复安装失败问题</h3><p>打开上面 <a href="https://link.jianshu.com/?t=https://github.com/LengYi/iosOpenDev" target="_blank" rel="noopener">附件</a> 里面的Specifications文件夹，里面应该有8个文件,如果你有安装多个xcode注意放到对应的xcode里面。</p>
<ol>
<li>iPhoneOS开头的四个文件放到<code>/应用程序/Xcode/Content/Developer/Platforms/IphoneOS.platform/Developer/Library/Xcode/Specifications</code>文件夹下（如果没有，请自己创建一个）</li>
<li>iPhone Simulator 开头的另外四个文件放入<code>/应用程序/Xcode/Content/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Xcode/Specifications</code>文件夹下(如果没有，请同样创建一个)</li>
<li>在<code>/应用程序/Xcode/Content/Developer/Platforms/iPhoneSimulator.platform/Developer/</code>文件夹下创建usr文件夹，usr文件夹下再创建一个名为bin的文件夹</li>
</ol>
<p>如果还是不行，重新安装iOSOpenDev,如果还是有问题请 <a href="https://link.jianshu.com/?t=http://www.cnblogs.com/xiongwj0910/p/3713290.html" target="_blank" rel="noopener">参考</a></p>
<h2 id="More-Info"><a href="#More-Info" class="headerlink" title="More Info"></a>More Info</h2><p>原文出处：<a href="https://www.jianshu.com/p/29580725707a" target="_blank" rel="noopener">https://www.jianshu.com/p/29580725707a</a></p>
]]></content>
      <categories>
        <category>iOSCrack</category>
      </categories>
      <tags>
        <tag>iOSOpenDev</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS升级到Ventura后dmidecode无法使用处理方案</title>
    <url>/macOS%E5%8D%87%E7%BA%A7%E5%88%B0Ventura%E5%90%8Edmidecode%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88.html</url>
    <content><![CDATA[<blockquote>
<p>最近将主力工作机macOS升级到了Ventura，发现dmidecode无法使用，特此记录一下如何解决</p>
</blockquote>
<h2 id="下载dmidecode-osx源码"><a href="#下载dmidecode-osx源码" class="headerlink" title="下载dmidecode-osx源码"></a>下载dmidecode-osx源码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/cavaliercoder/dmidecode-osx</span><br></pre></td></tr></table></figure>

<h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">diff --git a/dmidecode.c b/dmidecode.c</span><br><span class="line">index bb651da.<span class="number">.194108</span>c <span class="number">100644</span></span><br><span class="line">--- a/dmidecode.c</span><br><span class="line">+++ b/dmidecode.c</span><br><span class="line">@@ <span class="number">-4811</span>,<span class="number">8</span> +<span class="number">4811</span>,<span class="number">10</span> @@ <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dmi_table</span><span class="params">(<span class="keyword">off_t</span> base, u32 len, u16 num, u32 ver, <span class="keyword">const</span> <span class="keyword">char</span> *devmem,</span></span></span><br><span class="line">          * This CFRelease throws 'Segmentation fault: 11' since macOS 10.12, if</span><br><span class="line">          * the compiled binary is <span class="keyword">not</span> <span class="keyword">signed</span> with an Apple developer profile.</span><br><span class="line">          */</span><br><span class="line">+        <span class="meta">#<span class="meta-keyword">ifdef</span> SIGNED_BINARY  <span class="comment">// So don't do that unless you signed it</span></span></span><br><span class="line">         <span class="keyword">if</span> (<span class="literal">NULL</span> != properties)</span><br><span class="line">             CFRelease(properties);</span><br><span class="line">+        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">         IOObjectRelease(service);</span><br><span class="line">     &#125;</span><br><span class="line">@@ <span class="number">-5147</span>,<span class="number">7</span> +<span class="number">5149</span>,<span class="number">7</span> @@ <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * <span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function">         <span class="keyword">goto</span> exit_free</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">-    CFDataGetBytes(dataRef, CFRangeMake(<span class="number">0</span>, <span class="number">0x20</span>), (UInt8*)buf);</span><br><span class="line">+    CFDataGetBytes(dataRef, CFRangeMake(<span class="number">0</span>, CFDataGetLength(dataRef)), (UInt8*)buf);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span> (<span class="literal">NULL</span> != dataRef)</span><br><span class="line">         CFRelease(dataRef);</span><br></pre></td></tr></table></figure>

<h2 id="编译-amp-安装"><a href="#编译-amp-安装" class="headerlink" title="编译&amp;安装"></a>编译&amp;安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<h2 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make uninstall</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>源码出处：<a href="https://github.com/cavaliercoder/dmidecode-osx" target="_blank" rel="noopener">https://github.com/cavaliercoder/dmidecode-osx</a></p>
<p>解决方案出处：<a href="https://github.com/cavaliercoder/dmidecode-osx/issues/8" target="_blank" rel="noopener">https://github.com/cavaliercoder/dmidecode-osx/issues/8</a></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>dmidecode</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS升级到Ventura后gem无法使用处理方案</title>
    <url>/macOS%E5%8D%87%E7%BA%A7%E5%88%B0Ventura%E5%90%8Egem%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88.html</url>
    <content><![CDATA[<blockquote>
<p>最近将主力工作机macOS升级到了Ventura，发现<code>sass</code>无法安装成功，特此记录一下如何解决</p>
</blockquote>
<h2 id="错误信息参考"><a href="#错误信息参考" class="headerlink" title="错误信息参考"></a>错误信息参考</h2><blockquote>
<p>You don’t have write permissions for the /System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/gems/2.6.0 directory.</p>
</blockquote>
<h2 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install ruby</span><br></pre></td></tr></table></figure>

<h2 id="查看ruby版本"><a href="#查看ruby版本" class="headerlink" title="查看ruby版本"></a>查看ruby版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ruby -v</span><br></pre></td></tr></table></figure>

<h2 id="安装完成后发现依旧是2-6版本，需要设置环境变量"><a href="#安装完成后发现依旧是2-6版本，需要设置环境变量" class="headerlink" title="安装完成后发现依旧是2.6版本，需要设置环境变量"></a>安装完成后发现依旧是2.6版本，需要设置环境变量</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="ARM机型粘贴以下代码"><a href="#ARM机型粘贴以下代码" class="headerlink" title="ARM机型粘贴以下代码"></a>ARM机型粘贴以下代码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ -d "/opt/homebrew/opt/ruby/bin" ]; then</span><br><span class="line">  export PATH=/opt/homebrew/opt/ruby/bin:$PATH</span><br><span class="line">  export PATH=`gem environment gemdir`/bin:$PATH</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="x86机型粘贴以下代码"><a href="#x86机型粘贴以下代码" class="headerlink" title="x86机型粘贴以下代码"></a>x86机型粘贴以下代码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ -d "/usr/local/opt/ruby/bin" ]; then</span><br><span class="line">  export PATH=/usr/local/opt/ruby/bin:$PATH</span><br><span class="line">  export PATH=`gem environment gemdir`/bin:$PATH</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h2 id="再次查看版本是否为新安装的版本"><a href="#再次查看版本是否为新安装的版本" class="headerlink" title="再次查看版本是否为新安装的版本"></a>再次查看版本是否为新安装的版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br><span class="line">ruby -v</span><br></pre></td></tr></table></figure>

<h2 id="重新安装sass"><a href="#重新安装sass" class="headerlink" title="重新安装sass"></a>重新安装sass</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gem install sass</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>参考链接：</p>
<p><a href="https://mac.install.guide/ruby/13.html" target="_blank" rel="noopener">https://mac.install.guide/ruby/13.html</a></p>
<p><a href="https://blog.csdn.net/liuwenchang1234/article/details/127635234" target="_blank" rel="noopener">https://blog.csdn.net/liuwenchang1234/article/details/127635234</a></p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>gem</tag>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>sysbench基准测试</title>
    <url>/sysbench%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95.html</url>
    <content><![CDATA[<p>文件I/O(fileio)基准测试可以测试系统在不同I/O负载下的性能。这对于比较不同的硬盘驱动器、不同的RAID卡、不同的RAID模式，都很有帮助。可以根据测试结果来调整I/O子系统。文件I/O基准测试模拟了很多InnoDB的I/O特性。测试的第一步是准备(prepare)阶段，生成测试用到的数据文件，生成的数据文件至少要比内存大。如果文件中的数据能完全放入内存中，则操作系统缓存大部分的数据，导致测试结果无法体现I/O密集型的工作负载。</p>
<h2 id="安装sysbench"><a href="#安装sysbench" class="headerlink" title="安装sysbench"></a>安装sysbench</h2><h3 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/akopytov/sysbench/archive/1.0.zip -O <span class="string">"sysbench-1.0.zip"</span></span><br><span class="line">unzip sysbench-1.0.zip</span><br><span class="line"><span class="built_in">cd</span> sysbench-1.0</span><br></pre></td></tr></table></figure>

<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install automake libtool –y</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line"><span class="comment">#这里换成机器中mysql路径下的include</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/mysql/include</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>有可能有的同学找不到include目录，不要慌，看看下面:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql-devel</span><br></pre></td></tr></table></figure>

<p><code>/usr/include/mysql</code>就是include目录了。</p>
<h2 id="内建测试-fileio测试"><a href="#内建测试-fileio测试" class="headerlink" title="内建测试: fileio测试"></a>内建测试: fileio测试</h2><h3 id="准备测试集"><a href="#准备测试集" class="headerlink" title="准备测试集"></a>准备测试集</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench --<span class="built_in">test</span>=fileio --file-total-size=150G prepare</span><br></pre></td></tr></table></figure>

<p><code>--test=fileio</code>表示测试类型为内建的fileio测试</p>
<p><code>--test-total-size=150G</code>表示准备测试数据集为150G大小</p>
<p><code>prepare</code>命令准备测试数据集</p>
<h3 id="查看帮助文档"><a href="#查看帮助文档" class="headerlink" title="查看帮助文档"></a>查看帮助文档</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench --<span class="built_in">test</span>=fileio <span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>fileio options: //可用的选项</p>
<p>–file-num=N number of files to create [128]   //文件数量</p>
<p>–file-block-size=N block size to use in all IO operations [16384]  //文件块大小设定</p>
<p>–file-total-size=SIZE total size of files to create [2G]  //文件总大小</p>
<p>–file-test-mode=STRING test mode {seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw}  //测试模式</p>
<p>–file-io-mode=STRING file operations mode {sync,async,mmap} [sync]  //io模式，“同步”、“异步”</p>
<p>–file-extra-flags=STRING additional flags to use on opening files {sync,dsync,direct} []</p>
<p>–file-fsync-freq=N do fsync() after this number of requests (0 - don’t use fsync()) [100]  //fsync()方法调用频率</p>
<p>–file-fsync-all=[on|off] do fsync() after each write operation [off]  //每一次写操作都进行fsync()同步，默认为off</p>
<p>–file-fsync-end=[on|off] do fsync() at the end of test [on]  //在测试结束之前调用fsync()同步方法</p>
<p>–file-fsync-mode=STRING which method to use for synchronization {fsync, fdatasync} [fsync]</p>
<p>–file-merged-requests=N merge at most this number of IO requests if possible (0 - don’t merge) [0]</p>
<p>–file-rw-ratio=N reads/writes ratio for combined<br>test [1.5]  //读写比率设定</p>
<p>有一个重要的测试选项：–file-test-mode=STRING。其可用的选项为：</p>
<p>seqwr：顺序写</p>
<p>seqrewr：顺序重写</p>
<p>seqrd：顺序读</p>
<p>rndrd：随机读取</p>
<p>rndwr：随机写入</p>
<p>rndrw：混合随机读/写</p>
<h3 id="混合随机读写测试"><a href="#混合随机读写测试" class="headerlink" title="混合随机读写测试"></a>混合随机读写测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench --<span class="built_in">test</span>=fileio --file-test-mode=rndrw --file-total-size=150G --file-rw-ratio=2 run</span><br></pre></td></tr></table></figure>

<p>选项解释：</p>
<p>–test-fileio：测试类型为IO测试</p>
<p>–file-total-size=5G：测试文件总大小为5G</p>
<p>–file-test-mode=rndrw：文件IO测试模式为随机混合读写方式</p>
<p>–file-rw-ratio=2：读写次数比率为2</p>
<h3 id="分析打印结果"><a href="#分析打印结果" class="headerlink" title="分析打印结果"></a>分析打印结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench 1.0:  multi-threaded system evaluation benchmark</span><br><span class="line"></span><br><span class="line">Running the <span class="built_in">test</span> with following options:</span><br><span class="line">Number of threads: 1    //测试线程数</span><br><span class="line">Initializing random number generator from current time</span><br><span class="line"></span><br><span class="line">//测试属性设定，可以通过选项控制</span><br><span class="line">Extra file open flags: 0</span><br><span class="line">128 files, 40MiB each</span><br><span class="line">5GiB total file size</span><br><span class="line">Block size 16KiB</span><br><span class="line">Number of IO requests: 10000</span><br><span class="line">Read/Write ratio <span class="keyword">for</span> combined random IO <span class="built_in">test</span>: 2.00</span><br><span class="line">Periodic FSYNC enabled, calling fsync() each 100 requests.</span><br><span class="line">Calling fsync() at the end of <span class="built_in">test</span>, Enabled.</span><br><span class="line">Using synchronous I/O mode</span><br><span class="line">Doing random r/w <span class="built_in">test</span></span><br><span class="line">Initializing worker threads...</span><br><span class="line"></span><br><span class="line">Threads started!</span><br><span class="line"></span><br><span class="line">//测试过程中文件操作情况</span><br><span class="line">File operations:</span><br><span class="line">    reads/s:                      95.45  //每秒钟读请求数</span><br><span class="line">    writes/s:                     47.72  //每秒钟写请求数</span><br><span class="line">    fsyncs/s:                     183.25  //没表中同步次数</span><br><span class="line"></span><br><span class="line">//吞吐率</span><br><span class="line">Throughput:</span><br><span class="line">    <span class="built_in">read</span>, MiB/s:                  1.49  //读，1.49MB每秒</span><br><span class="line">    written, MiB/s:               0.75  //写，0.75MB每秒</span><br><span class="line"></span><br><span class="line">//统计数据</span><br><span class="line">General statistics:</span><br><span class="line">    total time:                          69.8488s    //测试总时长</span><br><span class="line">    total number of events:              10000   　　//事件数量</span><br><span class="line">    total time taken by event execution: 39.6674s  　//事件执行事件</span><br><span class="line">    response time: //事件响应事件统计</span><br><span class="line">         min:                                  0.02ms   //最短</span><br><span class="line">         avg:                                  3.97ms   //平均</span><br><span class="line">         max:                                 27.70ms   //最长</span><br><span class="line">         approx.  95 percentile:              11.77ms   //95%以上事件响应时长</span><br><span class="line"></span><br><span class="line">Threads fairness:  //线程公平性统计信息</span><br><span class="line">    events (avg/stddev):           10000.0000/0.00</span><br><span class="line">    execution time (avg/stddev):   39.6674/0.00</span><br></pre></td></tr></table></figure>

<p>与文件IO性能评价密切相关的指标有：每秒钟请求数、吞吐量、95%以上事件响应时间。</p>
<h3 id="清除测试数据集"><a href="#清除测试数据集" class="headerlink" title="清除测试数据集"></a>清除测试数据集</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysbench --<span class="built_in">test</span>=fileio --file-total-size=150G cleanup</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>sysbench</tag>
      </tags>
  </entry>
  <entry>
    <title>代码开源协议选择</title>
    <url>/%E4%BB%A3%E7%A0%81%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E9%80%89%E6%8B%A9.html</url>
    <content><![CDATA[<blockquote>
<p>随着你项目做得多了代码写得多了，你会发现编码过程中会不时用到其他人的成果，一个项目下来多少会引入一些优秀的库，别人放在公网上开源的DLL，以及一些算法等等。细心的你会注意到即使只是一小段代码，优秀的作者都在最开始会简单地附上一段关于许可的声明，或者说是协议比如”Licensed under the MIT license”，并且一些博客也会标明”此文章发表在CC协议下”。而如果我们Copy了别人的代码或者文字同时没注意这些的话，在国外法律意识特别强的环境下，我们的作品会因触犯别人的权益而违法。因为好多开源协议最低要求是使用者需要保留原作者对代码的声明，不声不响地就拿来用了必然导致恶果。</p>
<p>所以开源不等于免费，开源也不等于没有约束。</p>
</blockquote>
<h2 id="什么是License"><a href="#什么是License" class="headerlink" title="什么是License?"></a>什么是License?</h2><p>License是软件的授权许可，里面详尽表述了你获得代码后拥有的权利，可以对别人的作品进行何种操作，何种操作又是被禁止的。软件协议可分为开源和商业。当然本文要讨论的当然是开源协议。</p>
<p>所以对于大多数人来说，不用自己花大把时间去写许可协议，选择一分广为流传的开源协议是个不错的选择，如果你的作品是开源的话，这样省时又省心。</p>
<h2 id="快速选择"><a href="#快速选择" class="headerlink" title="快速选择"></a>快速选择</h2><p>目前流行的开源协议有很多，并且同一款协议有很多变种，比如你或许看到过’ CC Attribution-NoDerivs’,’ CC Attribution-NonCommercial’同属CC协议（后面会有介绍）。如此纷繁的协议该如何选择？协议太宽松会导致作者丧失对作品的很多权利，太严格又不便于使用者使用及作品的传播。所以除了协议多之外，你还要考虑你对作品想保留哪些权利，放开哪些限制。</p>
<h2 id="简单宽松的协议"><a href="#简单宽松的协议" class="headerlink" title="简单宽松的协议"></a>简单宽松的协议</h2><p>如果你只想要一个简单点的协议不想太麻烦的话。</p>
<p><a href="http://choosealicense.com/licenses/mit" target="_blank" rel="noopener">MIT协议</a>相对宽松但还是抓住了要点的。此协议允许别人以任何方式使用你的代码同时署名原作者，但原作者不承担代码使用后的风险，当然也没有技术支持的义务。jQuery和Rails就是MIT协议。</p>
<h2 id="考虑有专利的情况"><a href="#考虑有专利的情况" class="headerlink" title="考虑有专利的情况"></a>考虑有专利的情况</h2><p>如果你的作品中涉及到专利相关。</p>
<p><a href="http://choosealicense.com/licenses/apache/" target="_blank" rel="noopener">Apache协议</a>也是个相对宽松与MIT类似的协议，但它简单指明了作品归属者对用户专利上的一些授权（我的理解是软件作品中含有专利，但它授权你可以免费使用）。Apache服务器，SVN还有NuGet等是使用的Apache协议。</p>
<h2 id="代码分享与促进"><a href="#代码分享与促进" class="headerlink" title="代码分享与促进"></a>代码分享与促进</h2><p>如果你在乎作品的传播和别人的修改，希望别人也以相同的协议分享出来。</p>
<p>GPL（<a href="http://choosealicense.com/licenses/gpl-v2" target="_blank" rel="noopener">V2</a>或<a href="http://choosealicense.com/licenses/gpl-v3" target="_blank" rel="noopener">V3</a>）是一种版本自由的协议（可以参照copy right来理解，后者是版本保留，那copyleft便是版权自由，或者无版权，但无版权不代表你可以不遵守软件中声明的协议）。此协议要求代码分发者或者以此代码为基础开发出来的衍生作品需要以同样的协议来发布。此协议的版本3与版本2相近，只是多3中加了条对于不支持修改后代码运行的硬件的限制（没太明白此句话的内涵）。</p>
<h2 id="各协议授权详情"><a href="#各协议授权详情" class="headerlink" title="各协议授权详情"></a>各协议授权详情</h2><ul>
<li>协议和版权信息(License and copyright notice)：在代码中保留作者提供的协议和版权信息</li>
<li>声明变更(State Changes)：在代码中声明对原来代码的重大修改及变更</li>
<li>公开源码(Disclose Source)：代码必需公开。如果是基于<a href="https://www.gnu.org/licenses/lgpl.html" target="_blank" rel="noopener">LGPL协议</a> 下，则只需使用的开源代码公开，不必将整个软件源码公开</li>
<li>库引用(Library usage)：该库可以用于商业软件中</li>
<li>责任承担(Hold Liable)：代码的作者承担代码使用后的风险及产生的后果</li>
<li>商标使用(Use Trademark)：可以使用作者的姓名，作品的Logo，或商标</li>
<li>附加协议(Sublicensing)：允许在软件分发传播过程中附加上原来没有的协议条款等</li>
</ul>
<table>
<thead>
<tr>
<th><strong>协议</strong></th>
<th><strong>描述</strong></th>
<th><strong>要求</strong></th>
<th><strong>允许</strong></th>
<th><strong>禁止</strong></th>
</tr>
</thead>
<tbody><tr>
<td><a href="http://choosealicense.com/licenses/apache/" target="_blank" rel="noopener">Apache</a></td>
<td>一个较宽松且简明地指出了专利授权的协议。</td>
<td>协议和版权信息 / 声明变更</td>
<td>商用 / 分发 / 修改 / 专利授权 / 私用 / 附加协议</td>
<td>责任承担（<em>禁止让作者承担责任，可以理解为免责</em>） / 商标使用</td>
</tr>
<tr>
<td><a href="http://choosealicense.com/licenses/gpl-v2/" target="_blank" rel="noopener">GPL</a></td>
<td>此协议是应用最为广泛的开源协议，拥有较强的版权自由( copyleft )要求。衍生代码的分发需开源并且也要遵守此协议。此协议有许多变种，不同变种的要求略有不同。</td>
<td>公开源码 / 协议和版权信息 / 声明变更</td>
<td>商用  /分发  /修改 / 专利授权 / 私用</td>
<td>责任承担 / 附加协议</td>
</tr>
<tr>
<td><a href="http://choosealicense.com/licenses/mit/" target="_blank" rel="noopener">MIT</a></td>
<td>宽松简单且精要的一个协议。在适当标明来源及免责的情况下，它允许你对代码进行任何形式的使用。</td>
<td>协议和版权信息</td>
<td>商用 /分发 / 修改 / 私用 / 附加协议</td>
<td>责任承担</td>
</tr>
<tr>
<td><a href="http://choosealicense.com/licenses/artistic/" target="_blank" rel="noopener">Artistic</a></td>
<td>Perl社区尤为钟爱此协议。要求更改后的软件不能影响原软件的使用。</td>
<td>协议和版权信息 / 声明变更</td>
<td>商用 / 分发 / 修改 / 私用 / 附加协议</td>
<td>责任承担 / 商标使用</td>
</tr>
<tr>
<td><a href="http://choosealicense.com/licenses/bsd/" target="_blank" rel="noopener">BSD</a></td>
<td>较为宽松的协议，包含两个变种<a href="http://choosealicense.com/licenses/bsd" target="_blank" rel="noopener"><strong>BSD 2-Clause</strong></a>和<a href="http://choosealicense.com/licenses/bsd-3-clause" target="_blank" rel="noopener"><strong>BSD 3-Clause</strong></a>，两者都与MIT协议只存在细微差异。</td>
<td>协议和版权信息</td>
<td>商用 / 分发 / 修改 / 私用 / 附加协议</td>
<td>责任承担</td>
</tr>
<tr>
<td><a href="http://choosealicense.com/licenses/eclipse/" target="_blank" rel="noopener">Eclipse</a></td>
<td>对商用非常友好的一种协议，可以用于软件的商业授权。包含对专利的优雅授权，并且也可以对相关代码应用商业协议。</td>
<td>公开源码 / 协议和版权信息</td>
<td>商用 / 分发 / 修改 / 专利授权 / 私用 / 附加协议</td>
<td>责任承担</td>
</tr>
<tr>
<td><a href="http://choosealicense.com/licenses/lgpl-v2.1/" target="_blank" rel="noopener">LGPL</a></td>
<td>主要用于一些代码库。衍生代码可以以此协议发布（言下之意你可以用其他协议），但与此协议相关的代码必需遵循此协议。</td>
<td>公开源码 / 库引用 / 协议和版权信息</td>
<td>商用 / 分发 / 修改 / 专利授权 / 私用 / 附加协议</td>
<td>责任承担</td>
</tr>
<tr>
<td><a href="http://choosealicense.com/licenses/mozilla/" target="_blank" rel="noopener">Mozilla</a></td>
<td>Mozilla Public License(MPL 2.0)是由Mozilla基金创建维护的。此协议旨在较为宽松的BSD协议和更加互惠的GPL协议中寻找一个折衷点。</td>
<td>公开源码 / 协议和版权信息</td>
<td>商用 / 分发 / 修改 / 专利授权 / 私用 / 附加协议</td>
<td>责任承担 /商标使用</td>
</tr>
<tr>
<td><a href="http://choosealicense.com/licenses/no-license/" target="_blank" rel="noopener">No license</a></td>
<td>你保留所有权利，不允许他人分发，复制或者创造衍生物。当你将代码发表在一些网站上时需要遵守该网站的协议，此协议可能包含了一些对你劳动成果的授权许可。比如你将代码发布到GitHub，那么你就必需同意别人可以查看和Fork你的代码。</td>
<td>协议和版权信息</td>
<td>商用 / 私用</td>
<td>分发 / 修改 / 附加协议</td>
</tr>
<tr>
<td><a href="http://choosealicense.com/licenses/unlicense/" target="_blank" rel="noopener">Public domain dedication</a></td>
<td>在许多国家，默认版权归作者自动拥有，所以<a href="http://unlicense.org/" target="_blank" rel="noopener">Unlicense</a>协议提供了一种通用的模板，此协议表明你放弃版权，将劳动成果无私贡献出来。你将丧失对作品的全部权利，包括在MIT/X11中定义的无担保权利。</td>
<td>N/A</td>
<td>商用 / 分发 / 修改 / 私用</td>
<td>责任承担</td>
</tr>
</tbody></table>
<h3 id="非代码类作品的协议"><a href="#非代码类作品的协议" class="headerlink" title="非代码类作品的协议"></a>非代码类作品的协议</h3><p>上面各协议只是针对软件或代码作品，如果你的作品不是代码，比如视频，音乐，图片，文章等，共享于公众之前，也最好声明一下协议以保证自己的权益不被侵犯。针对非代码的数字作品的协议，最通用的莫过于<a href="http://creativecommons.org/choose/" target="_blank" rel="noopener"><strong>Creative Commons</strong></a>(也是你经常在别人博客下面可以看到的CC协议)协议。</p>
<h3 id="无协议"><a href="#无协议" class="headerlink" title="无协议"></a>无协议</h3><p>你没有义务也没人非要你必需在自己的代码作品里面加上一个开源协议。但一如上文所讨论过的优点，如果你想把代码分享出来，最好还是选择一个适合的开源协议，这样别人用着放心。</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>原文出处：<a href="https://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html" target="_blank" rel="noopener">https://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html</a></p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>license</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Spring-Cloud的一点想法</title>
    <url>/%E5%85%B3%E4%BA%8ESpring-Cloud%E7%9A%84%E4%B8%80%E7%82%B9%E6%83%B3%E6%B3%95.html</url>
    <content><![CDATA[<p>第一次知道Spring-Cloud是通过同学的介绍，第一次使用是因为想把在公司做的所有项目做一个集合，但是在实际使用过程中发现了一些问题，所以在这里对Spring-Cloud的使用场合以及需要注意的地方，做一个总结。</p>
<p>首先作为Spring-Cloud的核心就是Eureka-Server（服务发现平台），在Spring-Cloud中，几乎你创建的所有服务，都必须通过这个服务发现平台注册，那么安全性应该是首先需要考虑的了，再考虑到分布式，那么这个服务发现平台应该不只是在局域网内使用，因此我觉得应该需要有账户和密码，好在Spring-Security模块帮我解决了这个问题。</p>
<p>其二是网关处理，所有的服务最终的出口是Zuul，Zuul不能当作nginx，他对css/js等前端的处理不做好，因此如果想要使用spring-cloud的同学注意了，这里讲的所有概念都是基于微服务的，是一种需要将前端与服务端分离的架构模式。Zuul也可以代理由其他语言完成的微服务，比如ASP.NET/PHP语言等，但是最友好的应该是Spring-Cloud，这里可以通过设置route配置相关service-name，对于service-name相同的微服务，会自动对其做负载均衡处理。</p>
<p>再然后一个问题就是，每当我有一个新的微服务的时候，那么我就需要重新编译Zuul，再上传，这也太费劲了吧！然后出现了Config+Bus这个组合，结合git的WebHook功能，可以做到网关配置文件的集中管理。</p>
<p>接着说说负载均衡和熔断处理，在Spring-Cloud中主要是有Feign+Hystric来做的，但是似乎和我想的不太一样，首先我需要新建一个项目，把所有的服务聚合起来，然后对每个服务的每个http分别做熔断，这部分代码的编写无非就是接口+熔断，接口部分需要和每个service-id下的所有请求一一对应，但是似乎我没有找到好的解决方案，写这么些几乎重复的东西实在有些不舒服。替代的解决方案是去掉feign层，直接在zuul网关上进行处理，当请求无法到达的时候统一处理熔断。（似乎也不是很好）</p>
<p>最后的部分就是自动化部署了，毕竟每次编译代码+上传代码+上传服务器+重新启动也是个体力活，咱能自动化处理岂不美哉？</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>spring-cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>路由网关Zuul结合Config-Server配置文件更新教程</title>
    <url>/%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3Zuul%E7%BB%93%E5%90%88Config-Server%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%9B%B4%E6%96%B0%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，比如／api/user转发到到user服务，/api/shop转发到到shop服务。zuul默认和Ribbon结合实现了负载均衡的功能。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>新建一个项目名叫service-zuul，pom.xml文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fiveplus<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>service-zuul<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Zuul project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    					<span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">  				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来是application.properties配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">eureka.client.service-url.default-zone</span>=<span class="string">http://localhost:8761/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8769</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.rabbitmq.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br></pre></td></tr></table></figure>

<p>注意一下，需要安装rabbitmq。</p>
<p>接下来是bootstrap.properties配置文件，用来配置连接的Config Server。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-zuul</span></span><br><span class="line"><span class="meta">spring.cloud.config.label</span>=<span class="string">master</span></span><br><span class="line"><span class="meta">spring.cloud.config.profile</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.config.uri</span>= <span class="string">http://localhost:8888/</span></span><br></pre></td></tr></table></figure>

<p>然后是Application.java文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fiveplus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了，然后我们可以把所有的路由全写在git上（service-zuul-dev.properties）：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">zuul.routes.user.path</span>=<span class="string">/user-service/**</span></span><br><span class="line"><span class="meta">zuul.routes.user.service-id</span>=<span class="string">user-service</span></span><br></pre></td></tr></table></figure>

<p>然后可以结合WebHook，每当push文件的时候，发送请求更新配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://&lt;config_server_hostname/config_server_ip&gt;:&lt;config_server_port&gt;/bus/refresh</span><br></pre></td></tr></table></figure>

<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>注意，在<a href="/Spring-Config-Server搭建教程.html" title="Spring Config Server搭建教程">Spring Config Server搭建教程</a>中已经配置了Spring-Cloud-Bus。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>zuul</tag>
      </tags>
  </entry>
  <entry>
    <title>打开Windows Powershell Modules报错</title>
    <url>/%E6%89%93%E5%BC%80Windows-Powershell-Modules%E6%8A%A5%E9%94%99.html</url>
    <content><![CDATA[<p>在阿里云Windows Server里进入PowerShell的时候一直报如下错误：</p>
<p>警告: 无法加载文件<br>C:\Windows\system32\WindowsPowerShell\v1.0\Modules\PSDiagnostics\PSDiagnostics.psm1，因为在此系统中禁止执行脚本。有关详细信息，请参阅 “get-help about_signing”。</p>
<p>警告: 无法加载文件<br>C:\Windows\system32\WindowsPowerShell\v1.0\Modules\WebAdministration\WebAdministrationAliases.ps1，因为在此系统中禁止执行脚本。有关详细信息，请参阅 “get-help about_signing”。</p>
<p>进入PowerShell，执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned</span><br></pre></td></tr></table></figure>

<p>选择<y>之后再进入PowerShell，警告消失。</y></p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>PowerShell</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库事务以及事务隔离级别</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E4%BB%A5%E5%8F%8A%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.html</url>
    <content><![CDATA[<p>本篇文章讲述数据库事务的四大特性（ACID），并详细说明事务的隔离级别。</p>
<h3 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h3><p>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p>
<h3 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h3><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>
<p>拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p>
<h3 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h3><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p>
<p>即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p>
<p>关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p>
<h3 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h3><p>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p>
<p>例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p>
<p>以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p>
<h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p>
<p>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money=money+<span class="number">100</span> <span class="keyword">where</span> <span class="keyword">name</span>=’B’;  (此时A通知B)</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money=money - <span class="number">100</span> <span class="keyword">where</span> <span class="keyword">name</span>=’A’;</span><br></pre></td></tr></table></figure>

<p>当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p>
<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p>
<p>例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p>
<p>不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p>
<p>在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</p>
<h3 id="虚读（幻读）"><a href="#虚读（幻读）" class="headerlink" title="虚读（幻读）"></a>虚读（幻读）</h3><p>幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p>
<p>幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p>
<p>现在来看看MySQL数据库为我们提供的四种隔离级别：</p>
<p>① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。</p>
<p>② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。</p>
<p>③ Read committed (读已提交)：可避免脏读的发生。</p>
<p>④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</p>
<p>以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。</p>
<p>在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)；而在Oracle数据库中，只支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。</p>
<p>在MySQL数据库中查看当前事务的隔离级别：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br></pre></td></tr></table></figure>

<p>在MySQL数据库中设置事务的隔离级别：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>  [glogal | <span class="keyword">session</span>]  <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> 隔离级别名称;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> tx_isolation=’隔离级别名称;’</span><br></pre></td></tr></table></figure>

<p>记住：设置数据库的隔离级别一定要是在开启事务之前！</p>
<p>如果是使用JDBC对数据库的事务设置隔离级别的话，也应该是在调用Connection对象的setAutoCommit(false)方法之前。调用Connection对象的setTransactionIsolation(level)即可设置当前链接的隔离级别，至于参数level，可以使用Connection对象的字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement st = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    conn = JdbcUtils.getConnection();</span><br><span class="line">    conn.setTransactionIsolation(Connection.TRANSACTION_SERIAIZABLE);</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>原文出处：<a href="https://www.cnblogs.com/fjdingsd/p/5273008.html" target="_blank" rel="noopener">https://www.cnblogs.com/fjdingsd/p/5273008.html</a></p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
</search>
